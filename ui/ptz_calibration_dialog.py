# ui/ptz_calibration_dialog.py
"""
Interfaz gr√°fica para calibraci√≥n PTZ
Permite calibrar el centro de imagen y corregir direcciones de movimiento
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QGridLayout, QPushButton, QLabel,
    QDoubleSpinBox, QSpinBox, QGroupBox, QTextEdit, QCheckBox, QProgressBar,
    QComboBox, QFormLayout, QMessageBox, QTabWidget, QWidget, QSlider
)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt6.QtGui import QFont, QColor
import time
import threading
from typing import Optional, Dict, Tuple

try:
    from core.ptz_calibration_system import (
        PTZCalibrationSystem, CalibrationData, track_object_calibrated
    )
    CALIBRATION_AVAILABLE = True
except ImportError:
    CALIBRATION_AVAILABLE = False

class CalibrationTestThread(QThread):
    """Hilo para pruebas de calibraci√≥n"""
    test_completed = pyqtSignal(dict)
    log_message = pyqtSignal(str)
    
    def __init__(self, calibration_system: PTZCalibrationSystem):
        super().__init__()
        self.calibration_system = calibration_system
        self.test_type = ""
    
    def set_test(self, test_type: str):
        self.test_type = test_type
    
    def run(self):
        try:
            if self.test_type == "directions":
                self.log_message.emit("üß™ Iniciando prueba de direcciones...")
                results = self.calibration_system.test_movement_directions()
                self.test_completed.emit(results)
            
        except Exception as e:
            self.log_message.emit(f"‚ùå Error en prueba: {e}")

class PTZCalibrationDialog(QDialog):
    """Di√°logo para calibraci√≥n PTZ completa"""
    
    calibration_completed = pyqtSignal(str)  # IP de c√°mara calibrada
    
    def __init__(self, parent=None, camera_data=None):
        super().__init__(parent)
        self.setWindowTitle("üéØ Calibraci√≥n PTZ Avanzada")
        self.setFixedSize(800, 700)
        
        self.camera_data = camera_data or {}
        self.calibration_system = None
        self.calibration_points = []
        self.test_thread = None
        
        if CALIBRATION_AVAILABLE:
            self.calibration_system = PTZCalibrationSystem()
        
        self._setup_ui()
        self._connect_signals()
        
        if self.camera_data:
            self._load_camera_data()
    
    def _setup_ui(self):
        """Configurar interfaz de usuario"""
        layout = QVBoxLayout(self)
        
        # === T√çTULO ===
        title_label = QLabel("üéØ Calibraci√≥n PTZ Avanzada")
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # === TABS ===
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)
        
        # Tab 1: Conexi√≥n
        self._create_connection_tab()
        
        # Tab 2: Prueba de Direcciones
        self._create_direction_test_tab()
        
        # Tab 3: Calibraci√≥n de Centro
        self._create_center_calibration_tab()
        
        # Tab 4: Ajustes Avanzados
        self._create_advanced_tab()
        
        # === LOG ===
        log_group = QGroupBox("üìù Registro de Calibraci√≥n")
        log_layout = QVBoxLayout(log_group)
        
        self.log_display = QTextEdit()
        self.log_display.setMaximumHeight(150)
        self.log_display.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                font-family: 'Consolas', monospace;
                font-size: 10pt;
            }
        """)
        log_layout.addWidget(self.log_display)
        layout.addWidget(log_group)
        
        # === BOTONES PRINCIPALES ===
        button_layout = QHBoxLayout()
        
        self.save_btn = QPushButton("üíæ Guardar Calibraci√≥n")
        self.save_btn.clicked.connect(self._save_calibration)
        self.save_btn.setEnabled(False)
        
        self.load_btn = QPushButton("üìÇ Cargar Calibraci√≥n")
        self.load_btn.clicked.connect(self._load_calibration)
        
        self.close_btn = QPushButton("‚ùå Cerrar")
        self.close_btn.clicked.connect(self.close)
        
        button_layout.addWidget(self.save_btn)
        button_layout.addWidget(self.load_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.close_btn)
        layout.addLayout(button_layout)
    
    def _create_connection_tab(self):
        """Tab de conexi√≥n a c√°mara"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Informaci√≥n de c√°mara
        info_group = QGroupBox("üì∑ Informaci√≥n de C√°mara")
        info_layout = QFormLayout(info_group)
        
        self.ip_label = QLabel("No conectado")
        self.status_label = QLabel("‚ùå Desconectado")
        self.type_label = QLabel("Desconocido")
        
        info_layout.addRow("IP:", self.ip_label)
        info_layout.addRow("Estado:", self.status_label)
        info_layout.addRow("Tipo:", self.type_label)
        
        layout.addWidget(info_group)
        
        # Botones de conexi√≥n
        connection_group = QGroupBox("üîå Control de Conexi√≥n")
        connection_layout = QVBoxLayout(connection_group)
        
        self.connect_btn = QPushButton("üîó Conectar PTZ")
        self.connect_btn.clicked.connect(self._connect_camera)
        
        self.disconnect_btn = QPushButton("üîå Desconectar")
        self.disconnect_btn.clicked.connect(self._disconnect_camera)
        self.disconnect_btn.setEnabled(False)
        
        connection_layout.addWidget(self.connect_btn)
        connection_layout.addWidget(self.disconnect_btn)
        
        layout.addWidget(connection_group)
        
        # Estado de calibraci√≥n existente
        existing_group = QGroupBox("üìã Calibraci√≥n Existente")
        existing_layout = QVBoxLayout(existing_group)
        
        self.existing_info = QLabel("No hay calibraci√≥n guardada")
        existing_layout.addWidget(self.existing_info)
        
        layout.addWidget(existing_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üîå Conexi√≥n")
    
    def _create_direction_test_tab(self):
        """Tab para probar direcciones de movimiento"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Instrucciones
        instructions = QLabel("""
üß™ <b>Prueba de Direcciones</b><br>
Esta prueba mueve la c√°mara en cada direcci√≥n para verificar que los movimientos 
sean correctos. Observe la c√°mara y confirme si los movimientos coinciden con 
las direcciones indicadas.
        """)
        instructions.setWordWrap(True)
        layout.addWidget(instructions)
        
        # Controles de prueba
        test_group = QGroupBox("üéÆ Controles de Prueba")
        test_layout = QGridLayout(test_group)
        
        # Botones direccionales
        self.test_up_btn = QPushButton("‚Üë Probar ARRIBA")
        self.test_down_btn = QPushButton("‚Üì Probar ABAJO")
        self.test_left_btn = QPushButton("‚Üê Probar IZQUIERDA")
        self.test_right_btn = QPushButton("‚Üí Probar DERECHA")
        
        self.test_up_btn.clicked.connect(lambda: self._test_single_direction("up"))
        self.test_down_btn.clicked.connect(lambda: self._test_single_direction("down"))
        self.test_left_btn.clicked.connect(lambda: self._test_single_direction("left"))
        self.test_right_btn.clicked.connect(lambda: self._test_single_direction("right"))
        
        test_layout.addWidget(self.test_up_btn, 0, 1)
        test_layout.addWidget(self.test_left_btn, 1, 0)
        test_layout.addWidget(self.test_right_btn, 1, 2)
        test_layout.addWidget(self.test_down_btn, 2, 1)
        
        layout.addWidget(test_group)
        
        # Configuraci√≥n de inversi√≥n
        inversion_group = QGroupBox("üîÑ Configuraci√≥n de Direcciones")
        inversion_layout = QFormLayout(inversion_group)
        
        self.pan_inverted_cb = QCheckBox("Invertir movimiento PAN (izq/der)")
        self.tilt_inverted_cb = QCheckBox("Invertir movimiento TILT (arr/abj)")
        
        inversion_layout.addRow(self.pan_inverted_cb)
        inversion_layout.addRow(self.tilt_inverted_cb)
        
        self.apply_inversion_btn = QPushButton("‚úÖ Aplicar Inversiones")
        self.apply_inversion_btn.clicked.connect(self._apply_direction_inversion)
        inversion_layout.addRow(self.apply_inversion_btn)
        
        layout.addWidget(inversion_group)
        
        # Prueba autom√°tica completa
        auto_test_group = QGroupBox("ü§ñ Prueba Autom√°tica")
        auto_test_layout = QVBoxLayout(auto_test_group)
        
        self.auto_test_btn = QPushButton("üîÑ Ejecutar Prueba Completa")
        self.auto_test_btn.clicked.connect(self._run_automatic_test)
        
        self.test_progress = QProgressBar()
        self.test_progress.setVisible(False)
        
        auto_test_layout.addWidget(self.auto_test_btn)
        auto_test_layout.addWidget(self.test_progress)
        
        layout.addWidget(auto_test_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üß™ Direcciones")
    
    def _create_center_calibration_tab(self):
        """Tab para calibraci√≥n del centro"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Instrucciones
        instructions = QLabel("""
üéØ <b>Calibraci√≥n del Centro</b><br>
Para calibrar el centro de imagen:
1. Active la detecci√≥n de objetos
2. Cuando aparezca un objeto detectado, haga clic en "Agregar Punto"
3. Repita con el objeto en diferentes posiciones
4. Finalice la calibraci√≥n para calcular el centro corregido
        """)
        instructions.setWordWrap(True)
        layout.addWidget(instructions)
        
        # Estado de calibraci√≥n
        status_group = QGroupBox("üìä Estado de Calibraci√≥n")
        status_layout = QFormLayout(status_group)
        
        self.points_count_label = QLabel("0")
        self.current_offset_label = QLabel("No calibrado")
        
        status_layout.addRow("Puntos recolectados:", self.points_count_label)
        status_layout.addRow("Offset actual:", self.current_offset_label)
        
        layout.addWidget(status_group)
        
        # Controles de calibraci√≥n
        calibration_group = QGroupBox("üéØ Controles de Calibraci√≥n")
        calibration_layout = QVBoxLayout(calibration_group)
        
        point_controls = QHBoxLayout()
        
        self.add_point_btn = QPushButton("üìç Agregar Punto Actual")
        self.add_point_btn.clicked.connect(self._add_calibration_point)
        self.add_point_btn.setEnabled(False)
        
        self.clear_points_btn = QPushButton("üóëÔ∏è Limpiar Puntos")
        self.clear_points_btn.clicked.connect(self._clear_calibration_points)
        
        point_controls.addWidget(self.add_point_btn)
        point_controls.addWidget(self.clear_points_btn)
        
        calibration_layout.addLayout(point_controls)
        
        self.finalize_calibration_btn = QPushButton("‚úÖ Finalizar Calibraci√≥n de Centro")
        self.finalize_calibration_btn.clicked.connect(self._finalize_center_calibration)
        self.finalize_calibration_btn.setEnabled(False)
        
        calibration_layout.addWidget(self.finalize_calibration_btn)
        
        layout.addWidget(calibration_group)
        
        # Calibraci√≥n manual
        manual_group = QGroupBox("‚úã Calibraci√≥n Manual")
        manual_layout = QFormLayout(manual_group)
        
        self.manual_offset_x = QDoubleSpinBox()
        self.manual_offset_x.setRange(-0.5, 0.5)
        self.manual_offset_x.setDecimals(4)
        self.manual_offset_x.setSingleStep(0.001)
        
        self.manual_offset_y = QDoubleSpinBox()
        self.manual_offset_y.setRange(-0.5, 0.5)
        self.manual_offset_y.setDecimals(4)
        self.manual_offset_y.setSingleStep(0.001)
        
        manual_layout.addRow("Offset X:", self.manual_offset_x)
        manual_layout.addRow("Offset Y:", self.manual_offset_y)
        
        self.apply_manual_btn = QPushButton("‚úÖ Aplicar Offset Manual")
        self.apply_manual_btn.clicked.connect(self._apply_manual_offset)
        manual_layout.addRow(self.apply_manual_btn)
        
        layout.addWidget(manual_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üéØ Centro")
    
    def _create_advanced_tab(self):
        """Tab para ajustes avanzados"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # Sensibilidad
        sensitivity_group = QGroupBox("üéõÔ∏è Sensibilidad de Movimiento")
        sensitivity_layout = QFormLayout(sensitivity_group)
        
        self.pan_sensitivity = QDoubleSpinBox()
        self.pan_sensitivity.setRange(0.001, 0.1)
        self.pan_sensitivity.setDecimals(4)
        self.pan_sensitivity.setValue(0.005)
        self.pan_sensitivity.setSingleStep(0.001)
        
        self.tilt_sensitivity = QDoubleSpinBox()
        self.tilt_sensitivity.setRange(0.001, 0.1)
        self.tilt_sensitivity.setDecimals(4)
        self.tilt_sensitivity.setValue(0.005)
        self.tilt_sensitivity.setSingleStep(0.001)
        
        sensitivity_layout.addRow("Sensibilidad PAN:", self.pan_sensitivity)
        sensitivity_layout.addRow("Sensibilidad TILT:", self.tilt_sensitivity)
        
        self.apply_sensitivity_btn = QPushButton("‚úÖ Aplicar Sensibilidad")
        self.apply_sensitivity_btn.clicked.connect(self._apply_sensitivity)
        sensitivity_layout.addRow(self.apply_sensitivity_btn)
        
        layout.addWidget(sensitivity_group)
        
        # Zona muerta
        deadzone_group = QGroupBox("üéØ Zona Muerta (Deadzone)")
        deadzone_layout = QFormLayout(deadzone_group)
        
        self.deadzone_x = QDoubleSpinBox()
        self.deadzone_x.setRange(0.01, 0.2)
        self.deadzone_x.setDecimals(3)
        self.deadzone_x.setValue(0.03)
        self.deadzone_x.setSingleStep(0.01)
        
        self.deadzone_y = QDoubleSpinBox()
        self.deadzone_y.setRange(0.01, 0.2)
        self.deadzone_y.setDecimals(3)
        self.deadzone_y.setValue(0.03)
        self.deadzone_y.setSingleStep(0.01)
        
        deadzone_layout.addRow("Deadzone X:", self.deadzone_x)
        deadzone_layout.addRow("Deadzone Y:", self.deadzone_y)
        
        self.apply_deadzone_btn = QPushButton("‚úÖ Aplicar Zona Muerta")
        self.apply_deadzone_btn.clicked.connect(self._apply_deadzone)
        deadzone_layout.addRow(self.apply_deadzone_btn)
        
        layout.addWidget(deadzone_group)
        
        # Prueba de seguimiento
        test_tracking_group = QGroupBox("üß™ Prueba de Seguimiento")
        test_tracking_layout = QVBoxLayout(test_tracking_group)
        
        # Coordenadas de prueba
        test_coords_layout = QHBoxLayout()
        
        self.test_x = QSpinBox()
        self.test_x.setRange(0, 1920)
        self.test_x.setValue(960)
        
        self.test_y = QSpinBox()
        self.test_y.setRange(0, 1080)
        self.test_y.setValue(540)
        
        test_coords_layout.addWidget(QLabel("X:"))
        test_coords_layout.addWidget(self.test_x)
        test_coords_layout.addWidget(QLabel("Y:"))
        test_coords_layout.addWidget(self.test_y)
        
        test_tracking_layout.addLayout(test_coords_layout)
        
        self.test_tracking_btn = QPushButton("üéØ Probar Seguimiento a Punto")
        self.test_tracking_btn.clicked.connect(self._test_tracking)
        test_tracking_layout.addWidget(self.test_tracking_btn)
        
        layout.addWidget(test_tracking_group)
        
        # Reset completo
        reset_group = QGroupBox("üîÑ Reset de Calibraci√≥n")
        reset_layout = QVBoxLayout(reset_group)
        
        self.reset_btn = QPushButton("‚ö†Ô∏è Reset Completo de Calibraci√≥n")
        self.reset_btn.setStyleSheet("QPushButton { background-color: #ff6b6b; color: white; font-weight: bold; }")
        self.reset_btn.clicked.connect(self._reset_calibration)
        reset_layout.addWidget(self.reset_btn)
        
        layout.addWidget(reset_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "‚öôÔ∏è Avanzado")
    
    def _connect_signals(self):
        """Conectar se√±ales"""
        pass
    
    def _load_camera_data(self):
        """Cargar datos de la c√°mara"""
        ip = self.camera_data.get('ip', 'Desconocido')
        tipo = self.camera_data.get('tipo', 'Desconocido')
        
        self.ip_label.setText(ip)
        self.type_label.setText(tipo.upper())
        
        self._log(f"üì∑ C√°mara cargada: {ip} ({tipo})")
        
        # Cargar calibraci√≥n existente si existe
        self._load_existing_calibration()
    
    def _load_existing_calibration(self):
        """Cargar calibraci√≥n existente"""
        if not CALIBRATION_AVAILABLE or not self.camera_data.get('ip'):
            return
        
        try:
            from core.ptz_calibration_system import CalibrationData
            
            ip = self.camera_data.get('ip')
            calibration = CalibrationData.load_from_file(ip)
            
            if calibration.calibration_date:
                info_text = f"""
üìÖ Fecha: {calibration.calibration_date[:10]}
üéØ Offset X: {calibration.center_offset_x:.4f}
üéØ Offset Y: {calibration.center_offset_y:.4f}
üéõÔ∏è Pan Sens: {calibration.pan_sensitivity:.4f}
üéõÔ∏è Tilt Sens: {calibration.tilt_sensitivity:.4f}
üîÑ Pan Dir: {'Invertido' if calibration.pan_direction == -1 else 'Normal'}
üîÑ Tilt Dir: {'Invertido' if calibration.tilt_direction == -1 else 'Normal'}
                """
                self.existing_info.setText(info_text.strip())
                
                # Cargar valores en la UI
                self.manual_offset_x.setValue(calibration.center_offset_x)
                self.manual_offset_y.setValue(calibration.center_offset_y)
                self.pan_sensitivity.setValue(calibration.pan_sensitivity)
                self.tilt_sensitivity.setValue(calibration.tilt_sensitivity)
                self.deadzone_x.setValue(calibration.deadzone_x)
                self.deadzone_y.setValue(calibration.deadzone_y)
                self.pan_inverted_cb.setChecked(calibration.pan_direction == -1)
                self.tilt_inverted_cb.setChecked(calibration.tilt_direction == -1)
                
                self._log(f"‚úÖ Calibraci√≥n existente cargada para {ip}")
            else:
                self.existing_info.setText("No hay calibraci√≥n guardada")
                self._log(f"‚ÑπÔ∏è No hay calibraci√≥n para {ip}")
                
        except Exception as e:
            self._log(f"‚ùå Error cargando calibraci√≥n: {e}")
    
    def _connect_camera(self):
        """Conectar a la c√°mara PTZ"""
        if not CALIBRATION_AVAILABLE:
            self._log("‚ùå Sistema de calibraci√≥n no disponible")
            return
        
        if not self.camera_data:
            self._log("‚ùå No hay datos de c√°mara")
            return
        
        try:
            ip = self.camera_data.get('ip')
            port = self.camera_data.get('puerto', 80)
            username = self.camera_data.get('usuario', 'admin')
            password = self.camera_data.get('contrasena', 'admin123')
            
            self._log(f"üîó Conectando a {ip}:{port}...")
            
            success = self.calibration_system.start_calibration(ip, port, username, password)
            
            if success:
                self.status_label.setText("‚úÖ Conectado")
                self.status_label.setStyleSheet("color: green; font-weight: bold;")
                self.connect_btn.setEnabled(False)
                self.disconnect_btn.setEnabled(True)
                self._enable_calibration_controls(True)
                self._log(f"‚úÖ Conectado exitosamente a {ip}")
            else:
                self.status_label.setText("‚ùå Error de conexi√≥n")
                self.status_label.setStyleSheet("color: red; font-weight: bold;")
                self._log(f"‚ùå Error conectando a {ip}")
                
        except Exception as e:
            self._log(f"‚ùå Error en conexi√≥n: {e}")
            self.status_label.setText("‚ùå Error de conexi√≥n")
            self.status_label.setStyleSheet("color: red; font-weight: bold;")
    
    def _disconnect_camera(self):
        """Desconectar de la c√°mara"""
        self.calibration_system = None
        if CALIBRATION_AVAILABLE:
            from core.ptz_calibration_system import PTZCalibrationSystem
            self.calibration_system = PTZCalibrationSystem()
        
        self.status_label.setText("‚ùå Desconectado")
        self.status_label.setStyleSheet("color: gray;")
        self.connect_btn.setEnabled(True)
        self.disconnect_btn.setEnabled(False)
        self._enable_calibration_controls(False)
        self._log("üîå Desconectado de la c√°mara")
    
    def _enable_calibration_controls(self, enabled: bool):
        """Habilitar/deshabilitar controles de calibraci√≥n"""
        # Tab direcciones
        self.test_up_btn.setEnabled(enabled)
        self.test_down_btn.setEnabled(enabled)
        self.test_left_btn.setEnabled(enabled)
        self.test_right_btn.setEnabled(enabled)
        self.auto_test_btn.setEnabled(enabled)
        self.apply_inversion_btn.setEnabled(enabled)
        
        # Tab avanzado
        self.apply_sensitivity_btn.setEnabled(enabled)
        self.apply_deadzone_btn.setEnabled(enabled)
        self.test_tracking_btn.setEnabled(enabled)
        
        # Bot√≥n guardar
        self.save_btn.setEnabled(enabled)
    
    def _test_single_direction(self, direction: str):
        """Probar una direcci√≥n espec√≠fica"""
        if not self.calibration_system or not self.calibration_system.current_camera:
            self._log("‚ùå No hay c√°mara conectada")
            return
        
        self._log(f"üß™ Probando movimiento: {direction.upper()}")
        
        try:
            speed = 0.3
            duration = 1.0
            
            if direction == "up":
                self.calibration_system.current_camera.continuous_move(0, speed, 0)
            elif direction == "down":
                self.calibration_system.current_camera.continuous_move(0, -speed, 0)
            elif direction == "left":
                self.calibration_system.current_camera.continuous_move(-speed, 0, 0)
            elif direction == "right":
                self.calibration_system.current_camera.continuous_move(speed, 0, 0)
            
            # Crear timer para detener el movimiento
            self.stop_timer = QTimer()
            self.stop_timer.timeout.connect(self._stop_movement)
            self.stop_timer.setSingleShot(True)
            self.stop_timer.start(int(duration * 1000))
            
        except Exception as e:
            self._log(f"‚ùå Error en prueba de direcci√≥n: {e}")
    
    def _stop_movement(self):
        """Detener movimiento de la c√°mara"""
        if self.calibration_system and self.calibration_system.current_camera:
            self.calibration_system.current_camera.stop()
            self._log("‚èπÔ∏è Movimiento detenido")
    
    def _run_automatic_test(self):
        """Ejecutar prueba autom√°tica de direcciones"""
        if not self.calibration_system:
            self._log("‚ùå No hay sistema de calibraci√≥n")
            return
        
        self._log("ü§ñ Iniciando prueba autom√°tica...")
        self.test_progress.setVisible(True)
        self.test_progress.setValue(0)
        self.auto_test_btn.setEnabled(False)
        
        # Crear y configurar hilo de prueba
        self.test_thread = CalibrationTestThread(self.calibration_system)
        self.test_thread.test_completed.connect(self._on_test_completed)
        self.test_thread.log_message.connect(self._log)
        self.test_thread.set_test("directions")
        self.test_thread.start()
    
    def _on_test_completed(self, results: dict):
        """Manejar finalizaci√≥n de prueba"""
        self.test_progress.setVisible(False)
        self.auto_test_btn.setEnabled(True)
        
        if "error" in results:
            self._log(f"‚ùå Error en prueba: {results['error']}")
        else:
            self._log("‚úÖ Prueba de direcciones completada:")
            for direction, result in results.items():
                self._log(f"   {direction}: {result}")
    
    def _apply_direction_inversion(self):
        """Aplicar configuraci√≥n de inversi√≥n de direcciones"""
        if not self.calibration_system:
            self._log("‚ùå No hay sistema de calibraci√≥n")
            return
        
        pan_inverted = self.pan_inverted_cb.isChecked()
        tilt_inverted = self.tilt_inverted_cb.isChecked()
        
        success = self.calibration_system.set_direction_inversion(pan_inverted, tilt_inverted)
        
        if success:
            self._log(f"‚úÖ Direcciones configuradas: PAN={'Inv' if pan_inverted else 'Norm'}, TILT={'Inv' if tilt_inverted else 'Norm'}")
        else:
            self._log("‚ùå Error aplicando inversi√≥n de direcciones")
    
    def _add_calibration_point(self):
        """Agregar punto de calibraci√≥n actual"""
        # Esta funci√≥n ser√≠a llamada desde el sistema principal cuando hay una detecci√≥n
        self._log("üìç Para agregar puntos, active la detecci√≥n y presione este bot√≥n cuando vea objetos detectados")
    
    def add_detection_point(self, center_x: float, center_y: float, frame_w: int, frame_h: int):
        """M√©todo p√∫blico para agregar punto desde detecci√≥n externa"""
        if not self.calibration_system:
            return
        
        self.calibration_system.add_calibration_point((center_x, center_y), (frame_w, frame_h))
        
        point_count = len(self.calibration_system.calibration_points)
        self.points_count_label.setText(str(point_count))
        
        if point_count >= 3:
            self.finalize_calibration_btn.setEnabled(True)
            self.add_point_btn.setEnabled(True)
        
        self._log(f"üìç Punto agregado: ({center_x:.1f}, {center_y:.1f}) - Total: {point_count}")
    
    def _clear_calibration_points(self):
        """Limpiar puntos de calibraci√≥n"""
        if self.calibration_system:
            self.calibration_system.calibration_points.clear()
        
        self.points_count_label.setText("0")
        self.finalize_calibration_btn.setEnabled(False)
        self._log("üóëÔ∏è Puntos de calibraci√≥n limpiados")
    
    def _finalize_center_calibration(self):
        """Finalizar calibraci√≥n del centro"""
        if not self.calibration_system:
            self._log("‚ùå No hay sistema de calibraci√≥n")
            return
        
        # Usar tama√±o de frame t√≠pico si no se especifica
        frame_size = (1920, 1080)  # Se puede actualizar seg√∫n la c√°mara
        
        success = self.calibration_system.finalize_calibration(frame_size)
        
        if success:
            calibration = self.calibration_system.current_calibration
            self.current_offset_label.setText(f"X: {calibration.center_offset_x:.4f}, Y: {calibration.center_offset_y:.4f}")
            self.manual_offset_x.setValue(calibration.center_offset_x)
            self.manual_offset_y.setValue(calibration.center_offset_y)
            self._log("‚úÖ Calibraci√≥n de centro finalizada exitosamente")
        else:
            self._log("‚ùå Error finalizando calibraci√≥n de centro")
    
    def _apply_manual_offset(self):
        """Aplicar offset manual"""
        if not self.calibration_system or not self.calibration_system.current_calibration:
            self._log("‚ùå No hay calibraci√≥n activa")
            return
        
        offset_x = self.manual_offset_x.value()
        offset_y = self.manual_offset_y.value()
        
        self.calibration_system.current_calibration.center_offset_x = offset_x
        self.calibration_system.current_calibration.center_offset_y = offset_y
        
        self.current_offset_label.setText(f"X: {offset_x:.4f}, Y: {offset_y:.4f}")
        self._log(f"‚úÖ Offset manual aplicado: X={offset_x:.4f}, Y={offset_y:.4f}")
    
    def _apply_sensitivity(self):
        """Aplicar configuraci√≥n de sensibilidad"""
        if not self.calibration_system:
            self._log("‚ùå No hay sistema de calibraci√≥n")
            return
        
        pan_sens = self.pan_sensitivity.value()
        tilt_sens = self.tilt_sensitivity.value()
        
        success = self.calibration_system.adjust_sensitivity(pan_sens, tilt_sens)
        
        if success:
            self._log(f"‚úÖ Sensibilidad aplicada: PAN={pan_sens:.4f}, TILT={tilt_sens:.4f}")
        else:
            self._log("‚ùå Error aplicando sensibilidad")
    
    def _apply_deadzone(self):
        """Aplicar configuraci√≥n de zona muerta"""
        if not self.calibration_system or not self.calibration_system.current_calibration:
            self._log("‚ùå No hay calibraci√≥n activa")
            return
        
        deadzone_x = self.deadzone_x.value()
        deadzone_y = self.deadzone_y.value()
        
        self.calibration_system.current_calibration.deadzone_x = deadzone_x
        self.calibration_system.current_calibration.deadzone_y = deadzone_y
        
        self._log(f"‚úÖ Zona muerta aplicada: X={deadzone_x:.3f}, Y={deadzone_y:.3f}")
    
    def _test_tracking(self):
        """Probar seguimiento a punto espec√≠fico"""
        if not self.calibration_system:
            self._log("‚ùå No hay sistema de calibraci√≥n")
            return
        
        test_x = self.test_x.value()
        test_y = self.test_y.value()
        frame_size = (1920, 1080)  # Tama√±o t√≠pico
        
        self._log(f"üéØ Probando seguimiento a punto ({test_x}, {test_y})")
        
        try:
            from core.ptz_calibration_system import track_object_calibrated
            
            ip = self.camera_data.get('ip')
            port = self.camera_data.get('puerto', 80)
            username = self.camera_data.get('usuario', 'admin')
            password = self.camera_data.get('contrasena', 'admin123')
            
            success = track_object_calibrated(
                ip, port, username, password,
                (test_x, test_y), frame_size
            )
            
            if success:
                self._log("‚úÖ Prueba de seguimiento exitosa")
            else:
                self._log("‚ùå Error en prueba de seguimiento")
                
        except Exception as e:
            self._log(f"‚ùå Error en prueba: {e}")
    
    def _save_calibration(self):
        """Guardar calibraci√≥n actual"""
        if not self.calibration_system or not self.calibration_system.current_calibration:
            self._log("‚ùå No hay calibraci√≥n para guardar")
            return
        
        success = self.calibration_system.current_calibration.save_to_file()
        
        if success:
            self._log("üíæ Calibraci√≥n guardada exitosamente")
            QMessageBox.information(self, "Calibraci√≥n Guardada", 
                                   "‚úÖ La calibraci√≥n se ha guardado correctamente.")
            self.calibration_completed.emit(self.camera_data.get('ip', ''))
        else:
            self._log("‚ùå Error guardando calibraci√≥n")
            QMessageBox.critical(self, "Error", "‚ùå Error guardando la calibraci√≥n.")
    
    def _load_calibration(self):
        """Cargar calibraci√≥n desde archivo"""
        self._load_existing_calibration()
        self._log("üìÇ Calibraci√≥n recargada desde archivo")
    
    def _reset_calibration(self):
        """Reset completo de calibraci√≥n"""
        reply = QMessageBox.question(
            self, "Reset Calibraci√≥n",
            "‚ö†Ô∏è ¬øEst√° seguro de que desea resetear toda la calibraci√≥n?\n\n"
            "Esto eliminar√° todos los valores calibrados y volver√° a los valores por defecto.",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            if self.calibration_system and self.camera_data.get('ip'):
                from core.ptz_calibration_system import CalibrationData
                
                # Crear nueva calibraci√≥n con valores por defecto
                ip = self.camera_data.get('ip')
                self.calibration_system.current_calibration = CalibrationData(camera_ip=ip)
                
                # Resetear UI
                self.manual_offset_x.setValue(0.0)
                self.manual_offset_y.setValue(0.0)
                self.pan_sensitivity.setValue(0.005)
                self.tilt_sensitivity.setValue(0.005)
                self.deadzone_x.setValue(0.03)
                self.deadzone_y.setValue(0.03)
                self.pan_inverted_cb.setChecked(False)
                self.tilt_inverted_cb.setChecked(False)
                self.current_offset_label.setText("No calibrado")
                self.points_count_label.setText("0")
                
                self._log("üîÑ Calibraci√≥n reseteada a valores por defecto")
    
    def _log(self, message: str):
        """Agregar mensaje al log"""
        timestamp = time.strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}"
        self.log_display.append(formatted_message)
        self.log_display.verticalScrollBar().setValue(
            self.log_display.verticalScrollBar().maximum()
        )

def create_calibration_dialog(parent=None, camera_data=None):
    """Crear di√°logo de calibraci√≥n PTZ"""
    if not CALIBRATION_AVAILABLE:
        QMessageBox.critical(
            parent, "Error",
            "‚ùå Sistema de calibraci√≥n PTZ no disponible.\n\n"
            "M√≥dulos requeridos:\n"
            "‚Ä¢ core/ptz_calibration_system.py\n"
            "‚Ä¢ core/ptz_control.py"
        )
        return None
    
    return PTZCalibrationDialog(parent, camera_data)

if __name__ == "__main__":
    from PyQt6.QtWidgets import QApplication
    import sys
    
    app = QApplication(sys.argv)
    
    # Datos de c√°mara de ejemplo
    camera_data = {
        'ip': '192.168.1.100',
        'puerto': 80,
        'usuario': 'admin',
        'contrasena': 'admin123',
        'tipo': 'ptz'
    }
    
    dialog = create_calibration_dialog(camera_data=camera_data)
    if dialog:
        dialog.show()
        sys.exit(app.exec())