from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QListWidget,
    QTextEdit, QMenuBar, QMenu, QGridLayout, QStackedWidget, QLabel,
    QScrollArea, QMessageBox, QSplitter
)
from PyQt6.QtGui import QAction
from PyQt6.QtCore import Qt
import importlib
from ui.camera_modal import CameraDialog
from gui.resumen_detecciones import ResumenDeteccionesWidget
from ui.config_modal import ConfiguracionDialog
from ui.fps_config_dialog import FPSConfigDialog
from ui.camera_manager import guardar_camaras, cargar_camaras_guardadas
from core.rtsp_builder import generar_rtsp
import os
import cProfile
import pstats
import io
# ===============================================
# IMPORTS PTZ SYSTEM - CORRECCI√ìN AUTOM√ÅTICA
# ===============================================
try:
    from core.ptz_control_enhanced import PTZDetectionBridge, create_multi_object_ptz_system
    PTZ_AVAILABLE = True
except ImportError as e:
    PTZ_AVAILABLE = False
    print(f"‚ö†Ô∏è PTZ no disponible: {e}")



# NUEVAS IMPORTACIONES: Sistema de Muestreo Adaptativo
try:
    from ui.adaptive_sampling_dialog import AdaptiveSamplingConfigDialog
    from core.adaptive_sampling import AdaptiveSamplingConfig
    ADAPTIVE_SAMPLING_AVAILABLE = True
except ImportError:
    ADAPTIVE_SAMPLING_AVAILABLE = False
    print("‚ÑπÔ∏è Sistema de muestreo adaptativo no disponible")

CONFIG_PATH = "config.json"

class MainGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        
        print("INFO: Iniciando profiler para MainGUI...")
        self.profiler = cProfile.Profile()
        self.profiler.enable()

        self.setWindowTitle("Monitor PTZ Inteligente - Orca")
        self.setGeometry(100, 100, 1600, 900)

        # Configuraci√≥n de FPS por defecto
        self.fps_config = {
            "visual_fps": 25,
            "detection_fps": 8, 
            "ui_update_fps": 15,
            "adaptive_fps": True
        }

        self.camera_data_list = []
        self.camera_widgets = [] 
        
        # NUEVO: Bridge PTZ para detecciones
        self.ptz_detection_bridge = None

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.main_layout = QVBoxLayout()
        self.central_widget.setLayout(self.main_layout)

        self.menu_bar = QMenuBar()
        self.setMenuBar(self.menu_bar)

        self.menu_inicio = self.menu_bar.addMenu("Inicio")
        self.menu_config = self.menu_bar.addMenu("Configuraci√≥n")
        self.menu_ptz = self.menu_bar.addMenu("PTZ")

        self.action_agregar = QAction("‚ûï Agregar C√°mara", self)
        self.action_agregar.triggered.connect(lambda: self.open_camera_dialog())
        self.menu_inicio.addAction(self.action_agregar)

        self.action_salir = QAction("üö™ Salir de la Aplicaci√≥n", self)
        self.action_salir.triggered.connect(self.close) 
        self.menu_inicio.addAction(self.action_salir)

        self.action_ver_config = QAction("‚öôÔ∏è Ver Configuraci√≥n", self)
        self.action_ver_config.triggered.connect(self.abrir_configuracion_modal)
        self.menu_config.addAction(self.action_ver_config)

        # Agregar acci√≥n de FPS al men√∫
        self.action_fps_config = QAction("üéØ Configurar FPS", self)
        self.action_fps_config.triggered.connect(self.abrir_fps_config)
        self.menu_config.addAction(self.action_fps_config)

        # NUEVO: Muestreo Adaptativo
        if ADAPTIVE_SAMPLING_AVAILABLE:
            self.action_adaptive_sampling = QAction("üß† Muestreo Adaptativo", self)
            self.action_adaptive_sampling.triggered.connect(self.abrir_muestreo_adaptativo_config)
            self.menu_config.addAction(self.action_adaptive_sampling)
            
            # Separador entre configuraciones
            self.menu_config.addSeparator()

        self.action_edit_line = QAction("üèÅ L√≠nea de Cruce", self)
        self.action_edit_line.triggered.connect(self.toggle_line_edit)
        self.menu_config.addAction(self.action_edit_line)

        # ‚úÖ MEN√ö PTZ CORREGIDO Y COMPLETO
        self.create_ptz_menu()

        self.stacked_widget = QStackedWidget()
        self.main_layout.addWidget(self.stacked_widget)

        self.init_tab = QWidget()
        self.init_tab_layout = QVBoxLayout()
        self.init_tab.setLayout(self.init_tab_layout)
        self.setup_inicio_ui() 

        self.stacked_widget.addWidget(self.init_tab)

        # Inicializar sistema PTZ al arrancar
        self._ptz_initialized = False

        # NUEVO: Agregar elementos del men√∫ de muestreo adaptativo
        self.add_adaptive_sampling_menu_items()

        cargar_camaras_guardadas(self)
        # ===============================================
        # INICIALIZACI√ìN SISTEMA PTZ - CORRECCI√ìN AUTO
        # ===============================================
        self.ptz_detection_bridge = None
        self.ptz_system = None
        if PTZ_AVAILABLE:
            # Metodo de inicializaci√≥n actualizado
            self._initialize_ptz_system()


    def _setup_ptz_menu(self):
        """‚úÖ NUEVO: Configurar men√∫ PTZ completo"""
        # Men√∫ PTZ B√°sico
        self.action_ptz_tracking = QAction("üéÆ Seguimiento B√°sico", self)
        self.action_ptz_tracking.triggered.connect(self.open_ptz_dialog)
        self.menu_ptz.addAction(self.action_ptz_tracking)

        # Gesti√≥n Avanzada PTZ
        self.action_ptz_presets = QAction("üéØ Gesti√≥n Avanzada PTZ", self)
        self.action_ptz_presets.triggered.connect(self.open_ptz_presets_dialog)
        self.menu_ptz.addAction(self.action_ptz_presets)

        # ‚úÖ NUEVO: PTZ Multi-Objeto (CORREGIDO)
        self.action_ptz_multi_object = QAction("üöÄ Seguimiento Multi-Objeto", self)
        self.action_ptz_multi_object.triggered.connect(self.open_ptz_multi_object_dialog)
        self.menu_ptz.addAction(self.action_ptz_multi_object)

        # Separador en el men√∫ PTZ
        self.menu_ptz.addSeparator()

        # Acciones adicionales PTZ
        self.action_ptz_init = QAction("üîß Inicializar Sistema PTZ", self)
        self.action_ptz_init.triggered.connect(self._initialize_ptz_system)
        self.menu_ptz.addAction(self.action_ptz_init)

        self.action_ptz_stop_all = QAction("‚èπÔ∏è Detener Todas las PTZ", self)
        self.action_ptz_stop_all.triggered.connect(self.stop_all_ptz)
        self.menu_ptz.addAction(self.action_ptz_stop_all)

    def create_ptz_menu(self):
        """Crear men√∫ PTZ y agregar acciones disponibles"""
        # Utilizar configuraci√≥n existente del men√∫
        self._setup_ptz_menu()

        # NUEVO: Calibraci√≥n PTZ
        self.action_ptz_calibration = QAction("üéØ Calibrar PTZ", self)
        self.action_ptz_calibration.triggered.connect(self.open_ptz_calibration)
        self.menu_ptz.addAction(self.action_ptz_calibration)

    def abrir_configuracion_modal(self):
        """Abrir modal de configuraci√≥n - M√âTODO CORREGIDO"""
        try:
            dialog = ConfiguracionDialog(self, camera_list=self.camera_data_list)
            if dialog.exec():
                guardar_camaras(self)
                self.append_debug("‚öôÔ∏è Configuraci√≥n del sistema guardada.")
            else:
                self.append_debug("‚öôÔ∏è Cambios en configuraci√≥n del sistema cancelados.")
        except ImportError as e:
            self.append_debug(f"‚ùå Error: No se pudo cargar el di√°logo de configuraci√≥n: {e}")
            QMessageBox.warning(
                self,
                "M√≥dulo no disponible",
                f"‚ùå No se pudo cargar el di√°logo de configuraci√≥n:\n{e}\n\n"
                f"Archivo requerido:\n"
                f"‚Ä¢ ui/config_modal.py"
            )
        except Exception as e:
            self.append_debug(f"‚ùå Error inesperado abriendo configuraci√≥n: {e}")

    # ‚úÖ NUEVO: M√©todo PTZ Multi-Objeto CORREGIDO
    def open_ptz_multi_object_dialog(self):
        """Abrir sistema PTZ multi-objeto CORREGIDO - versi√≥n que maneja wrapper correctamente"""
        try:
            # Verificar que hay c√°maras PTZ disponibles
            ptz_cameras = [cam for cam in self.camera_data_list if cam.get('tipo') == 'ptz']

            if not ptz_cameras:
                QMessageBox.warning(
                    self,
                    "Sin c√°maras PTZ",
                    "‚ùå No se encontraron c√°maras PTZ configuradas.\n\n"
                    "Para usar el seguimiento multi-objeto:\n"
                    "1. Agregue al menos una c√°mara con tipo 'ptz'\n"
                    "2. Configure las credenciales ONVIF\n"
                    "3. Verifique la conectividad de red\n\n"
                    "Use el men√∫ 'Configuraci√≥n ‚Üí C√°maras' para agregar c√°maras PTZ."
                )
                return

            self.append_debug(f"üéØ Abriendo sistema PTZ multi-objeto con {len(ptz_cameras)} c√°maras...")

            # CORRECCI√ìN CR√çTICA: Manejar el wrapper correctamente
            try:
                # Importar la funci√≥n corregida
                from core.ptz_control_enhanced import create_multi_object_ptz_system

                ptz_system = create_multi_object_ptz_system(self.camera_data_list, parent=self)

                if ptz_system is None:
                    self.append_debug("‚ùå No se pudo crear el sistema PTZ multi-objeto")
                    QMessageBox.critical(
                        self,
                        "Error de Inicializaci√≥n",
                        "‚ùå No se pudo inicializar el sistema PTZ multi-objeto.\n\n"
                        "Posibles causas:\n"
                        "‚Ä¢ M√≥dulos requeridos no disponibles\n"
                        "‚Ä¢ Error en configuraci√≥n de c√°maras\n"
                        "‚Ä¢ Problemas de conectividad\n\n"
                        "Revise la consola de debug para m√°s detalles."
                    )
                    return

                # CORRECCI√ìN: Verificar que el wrapper tiene el m√©todo show
                if not hasattr(ptz_system, 'show'):
                    self.append_debug("‚ùå Error: Sistema PTZ sin m√©todo show")
                    QMessageBox.critical(
                        self,
                        "Error del Sistema",
                        "‚ùå Error cr√≠tico: PTZSystemWrapper no tiene atributo 'show'\n\n"
                        "El sistema no pudo inicializarse correctamente.\n"
                        "Revise la configuraci√≥n y las dependencias."
                    )
                    return

                # Guardar referencia al sistema PTZ
                self.ptz_system = ptz_system

                # CORRECCI√ìN: Mostrar el di√°logo de forma segura
                try:
                    result = ptz_system.show()
                    if result:
                        self.append_debug("‚úÖ Sistema PTZ multi-objeto abierto exitosamente")
                    else:
                        self.append_debug("‚ö†Ô∏è Sistema PTZ creado pero no se pudo mostrar")
                except Exception as show_error:
                    self.append_debug(f"‚ùå Error mostrando di√°logo PTZ: {show_error}")
                    QMessageBox.warning(
                        self,
                        "Error de Visualizaci√≥n",
                        f"‚ùå No se pudo mostrar el di√°logo PTZ:\n{show_error}\n\n"
                        "El sistema se cre√≥ correctamente pero no se puede visualizar."
                    )

                # Configurar bridge de detecciones si est√° disponible
                if hasattr(ptz_system, 'dialog') and ptz_system.dialog:
                    bridge = getattr(ptz_system.dialog, 'detection_bridge', None)
                    if bridge:
                        self.ptz_detection_bridge = bridge
                        self.append_debug("üåâ Bridge PTZ configurado para integraci√≥n")

                        # Auto-iniciar seguimiento si es posible
                        if hasattr(ptz_system.dialog, '_start_tracking'):
                            try:
                                ptz_system.dialog._start_tracking()
                                self.append_debug("üöÄ Seguimiento PTZ iniciado autom√°ticamente")
                            except Exception as start_error:
                                self.append_debug(f"‚ö†Ô∏è No se pudo auto-iniciar seguimiento: {start_error}")

            except Exception as creation_error:
                self.append_debug(f"‚ùå Error cr√≠tico creando sistema PTZ: {creation_error}")
                QMessageBox.critical(
                    self,
                    "Error Cr√≠tico",
                    f"‚ùå Error cr√≠tico al crear el sistema PTZ:\n{creation_error}\n\n"
                    f"El sistema no pudo inicializarse correctamente.\n"
                    f"Revise la configuraci√≥n y las dependencias."
                )

        except ImportError as import_error:
            self.append_debug(f"‚ùå Error de importaci√≥n PTZ multi-objeto: {import_error}")
            QMessageBox.warning(
                self,
                "Sistema No Disponible",
                f"‚ùå Sistema PTZ multi-objeto no disponible:\n{import_error}\n\n"
                f"Archivos requeridos:\n"
                f"‚Ä¢ ui/enhanced_ptz_multi_object_dialog.py\n"
                f"‚Ä¢ core/ptz_control_enhanced.py\n\n"
                f"Dependencias:\n"
                f"‚Ä¢ pip install onvif-zeep numpy"
            )

        except Exception as general_error:
            self.append_debug(f"‚ùå Error inesperado abriendo PTZ multi-objeto: {general_error}")
            QMessageBox.critical(
                self,
                "Error Inesperado",
                f"‚ùå Error inesperado:\n{general_error}\n\n"
                f"Revise la consola para m√°s detalles.\n"
                f"Si el problema persiste, reinicie la aplicaci√≥n."
            )

    # ‚úÖ NUEVO: Integraci√≥n con sistema de detecci√≥n
    def send_custom_detections_to_ptz(self, detections_list):
        """
        Enviar detecciones personalizadas al PTZ

        Args:
            detections_list: Lista de detecciones en formato personalizado
        """
        if not self.ptz_detection_bridge:
            return

        try:
            self.ptz_detection_bridge.process_custom_detections(detections_list)
            self.append_debug(f"üéØ PTZ: {len(detections_list)} detecci√≥n(es) personalizada(s) enviada(s)")
        except Exception as e:
            self.append_debug(f"‚ö†Ô∏è Error enviando detecciones personalizadas al PTZ: {e}")

    def cleanup_ptz_system(self):
        """Limpiar sistema PTZ al cerrar la aplicaci√≥n"""
        try:
            if hasattr(self, 'ptz_detection_bridge') and self.ptz_detection_bridge:
                self.ptz_detection_bridge.cleanup()
                self.ptz_detection_bridge = None
                self.append_debug("üßπ Sistema PTZ limpiado")
        except Exception as e:
            self.append_debug(f"‚ùå Error limpiando sistema PTZ: {e}")

    def _initialize_ptz_system(self):
        """Inicializar sistema PTZ mejorado - CORRECCI√ìN AUTOM√ÅTICA"""
        try:
            # Verificar disponibilidad
            if not PTZ_AVAILABLE:
                self.append_debug("‚ö†Ô∏è Sistema PTZ no disponible")
                return False

            # Obtener c√°maras PTZ
            ptz_cameras = []
            if hasattr(self, 'cameras_config') and self.cameras_config:
                cameras = self.cameras_config.get('camaras', [])
                ptz_cameras = [cam for cam in cameras if cam.get('tipo', '').lower() == 'ptz']

            if not ptz_cameras:
                self.append_debug("üìù No hay c√°maras PTZ configuradas")
                return False

            # CORRECCI√ìN CR√çTICA: Crear sistema con validaci√≥n
            self.ptz_system = create_multi_object_ptz_system(ptz_cameras, self)

            if self.ptz_system:
                # CORRECCI√ìN: Crear bridge desde el sistema, no independiente
                if hasattr(self.ptz_system, 'dialog') and hasattr(self.ptz_system.dialog, 'detection_bridge'):
                    self.ptz_detection_bridge = self.ptz_system.dialog.detection_bridge
                    self.append_debug(f"‚úÖ Sistema PTZ inicializado con {len(ptz_cameras)} c√°mara(s)")

                    # Auto-iniciar seguimiento en la primera c√°mara
                    if ptz_cameras:
                        self._auto_start_ptz_tracking(ptz_cameras[0])
                    return True
                else:
                    self.append_debug("‚ùå Error: Bridge PTZ no disponible en el di√°logo")
                    return False
            else:
                self.append_debug("‚ùå Error creando sistema PTZ")
                return False

        except Exception as e:
            self.append_debug(f"‚ùå Error inicializando sistema PTZ: {e}")
            return False

    def _auto_start_ptz_tracking(self, camera_data):
        try:
            if not self.ptz_system or not hasattr(self.ptz_system, 'dialog'):
                return False
            dialog = self.ptz_system.dialog
            camera_name = f"{camera_data.get('ip', 'Unknown')} - {camera_data.get('nombre', 'PTZ')}"
            if hasattr(dialog, 'camera_combo'):
                for i in range(dialog.camera_combo.count()):
                    if camera_data.get('ip', '') in dialog.camera_combo.itemText(i):
                        dialog.camera_combo.setCurrentIndex(i)
                        break
            if hasattr(dialog, '_start_tracking'):
                dialog._start_tracking()
                self.append_debug(f"üöÄ Seguimiento PTZ auto-iniciado para {camera_name}")
                return True
            return False
        except Exception as e:
            self.append_debug(f"‚ùå Error auto-iniciando PTZ: {e}")
            return False

    def ensure_ptz_dialog_active(self):
        """Asegurar que el di√°logo PTZ est√© activo para recibir detecciones"""
        try:
            if hasattr(self, 'ptz_detection_bridge') and self.ptz_detection_bridge:
                bridge = self.ptz_detection_bridge
                if hasattr(bridge, 'ptz_system') and bridge.ptz_system:
                    dialog = bridge.ptz_system.dialog
                    if dialog and not getattr(dialog, 'tracking_active', False):
                        dialog.tracking_active = True
                        self.append_debug("üîÑ PTZ di√°logo activado para recibir detecciones")
                        return True
            return False
        except Exception as e:
            self.append_debug(f"‚ùå Error activando di√°logo PTZ: {e}")
            return False

    def send_detections_to_ptz(self, camera_id: str, detections):
        """Enviar detecciones al sistema PTZ mejorado"""
        try:
            # NUEVO: Asegurar que el di√°logo est√© activo
            self.ensure_ptz_dialog_active()

            if not hasattr(self, 'ptz_detection_bridge') or not self.ptz_detection_bridge:
                return False

            if not detections:
                return False

            # Limpiar camera_id
            if isinstance(camera_id, str) and camera_id.startswith('camera_'):
                camera_id = camera_id.replace('camera_', '')

            # Enviar detecciones
            success = self.ptz_detection_bridge.send_detections(camera_id, detections)

            if success:
                if not hasattr(self, '_ptz_detection_count'):
                    self._ptz_detection_count = 0
                self._ptz_detection_count += len(detections)

                # Log limitado
                if self._ptz_detection_count <= 50:
                    self.append_debug(f"üì° PTZ: {len(detections)} detecciones ‚Üí {camera_id}")

            return success

        except Exception as e:
            self.append_debug(f"‚ùå Error enviando detecciones a PTZ: {e}")
            return False

    def get_ptz_status(self, camera_id: str = None):
        """Obtener estado del sistema PTZ"""
        try:
            if hasattr(self, 'ptz_detection_bridge') and self.ptz_detection_bridge:
                return self.ptz_detection_bridge.get_status(camera_id)
            return {'error': 'Sistema PTZ no activo'}
        except Exception as e:
            return {'error': str(e)}

    def get_ptz_bridge_status(self):
        """Verificar estado del puente PTZ (para debugging)"""
        try:
            if hasattr(self, 'ptz_detection_bridge') and self.ptz_detection_bridge:
                status = {
                    'active': True,
                    'cameras_registered': len(self.ptz_detection_bridge.active_cameras),
                    'detection_count': self.ptz_detection_bridge.detection_count,
                    'active_cameras': list(self.ptz_detection_bridge.active_cameras.keys())
                }
                return status
            else:
                return {
                    'active': False,
                    'error': 'Puente PTZ no inicializado'
                }
        except Exception as e:
            return {
                'active': False,
                'error': str(e)
            }

    def process_detections_for_ptz(self, results, frame_shape, camera_id=None):
        """Procesar detecciones para PTZ multi-objeto (Formato YOLO completo)"""
        if not hasattr(self, 'ptz_detection_bridge') or not self.ptz_detection_bridge:
            return 0

        try:
            if hasattr(self.ptz_detection_bridge, 'process_yolo_results'):
                detections_count = self.ptz_detection_bridge.process_yolo_results(
                    results, frame_shape
                )
            else:
                detections_count = self._convert_and_send_detections(results, camera_id)

            if detections_count > 0:
                self.append_debug(
                    f"üéØ PTZ: {detections_count} detecci√≥n(es) enviada(s) al sistema PTZ"
                )

            return detections_count

        except Exception as e:
            self.append_debug(f"‚ö†Ô∏è Error enviando detecciones al PTZ: {e}")
            return 0

    def _convert_and_send_detections(self, results, camera_id):
        """Convertir detecciones YOLO a formato b√°sico y enviar al PTZ"""
        try:
            if not results or not hasattr(results, 'boxes'):
                return 0

            detections_list = []
            boxes = results.boxes

            if boxes is not None and len(boxes) > 0:
                for i, box in enumerate(boxes):
                    xyxy = box.xyxy[0].cpu().numpy()
                    conf = float(box.conf[0].cpu().numpy())
                    cls = int(box.cls[0].cpu().numpy())

                    x1, y1, x2, y2 = xyxy
                    cx = float((x1 + x2) / 2)
                    cy = float((y1 + y2) / 2)
                    width = float(x2 - x1)
                    height = float(y2 - y1)

                    detection = {
                        'cx': cx,
                        'cy': cy,
                        'width': width,
                        'height': height,
                        'confidence': conf,
                        'class': cls,
                        'bbox': [float(x1), float(y1), float(x2), float(y2)],
                        'frame_w': results.orig_shape[1] if hasattr(results, 'orig_shape') else 1920,
                        'frame_h': results.orig_shape[0] if hasattr(results, 'orig_shape') else 1080
                    }
                    detections_list.append(detection)

            if detections_list and camera_id:
                success = self.send_detections_to_ptz(camera_id, detections_list)
                return len(detections_list) if success else 0

            return 0

        except Exception as e:
            self.append_debug(f"‚ùå Error convirtiendo detecciones para PTZ: {e}")
            return 0

    def register_camera_with_ptz(self, camera_data):
        """Registrar una c√°mara con el sistema PTZ"""
        try:
            if hasattr(self, 'ptz_detection_bridge') and self.ptz_detection_bridge:
                camera_id = camera_data.get('ip', camera_data.get('id', 'unknown'))

                if camera_data.get('tipo') == 'ptz':
                    success = self.ptz_detection_bridge.register_camera(camera_id, camera_data)
                    if success:
                        self.append_debug(f"üì∑ C√°mara PTZ registrada: {camera_id}")
                        return True
                    else:
                        self.append_debug(f"‚ùå Error registrando c√°mara PTZ: {camera_id}")
                else:
                    self.append_debug(
                        f"üìπ C√°mara fija preparada para env√≠o de detecciones: {camera_id}"
                    )
                    return True

            return False
        except Exception as e:
            self.append_debug(f"‚ùå Error registrando c√°mara con PTZ: {e}")
            return False

    def add_adaptive_sampling_menu_items(self):
        """Agrega elementos del men√∫ de muestreo adaptativo"""
        if ADAPTIVE_SAMPLING_AVAILABLE:
            # Agregar separador antes de las opciones de muestreo adaptativo
            self.menu_config.addSeparator()
            
            # Men√∫ principal de muestreo adaptativo
            adaptive_menu = self.menu_config.addMenu("üß† Muestreo Adaptativo")
            
            # Configuraci√≥n global
            config_global_action = QAction("‚öôÔ∏è Configuraci√≥n Global", self)
            config_global_action.triggered.connect(self.abrir_muestreo_adaptativo_config)
            adaptive_menu.addAction(config_global_action)
            
            # Estado de todas las c√°maras
            status_all_action = QAction("üìä Estado de Todas las C√°maras", self)
            status_all_action.triggered.connect(self.show_adaptive_sampling_status)
            adaptive_menu.addAction(status_all_action)
            
            # Separador
            adaptive_menu.addSeparator()
            
            # Activar/Desactivar para todas
            enable_all_action = QAction("üß† Activar en Todas", self)
            enable_all_action.triggered.connect(lambda: self.toggle_adaptive_sampling_all(True))
            adaptive_menu.addAction(enable_all_action)
            
            disable_all_action = QAction("üìä Desactivar en Todas (Usar Fijo)", self)
            disable_all_action.triggered.connect(lambda: self.toggle_adaptive_sampling_all(False))
            adaptive_menu.addAction(disable_all_action)
            
            # Separador
            adaptive_menu.addSeparator()
            
            # Presets de configuraci√≥n
            presets_menu = adaptive_menu.addMenu("üöÄ Aplicar Preset")
            
            aggressive_action = QAction("‚ö° Agresivo (M√°ximo rendimiento)", self)
            aggressive_action.triggered.connect(lambda: self.apply_adaptive_preset("aggressive"))
            presets_menu.addAction(aggressive_action)
            
            balanced_action = QAction("‚öñÔ∏è Balanceado (Recomendado)", self)
            balanced_action.triggered.connect(lambda: self.apply_adaptive_preset("balanced"))
            presets_menu.addAction(balanced_action)
            
            conservative_action = QAction("üõ°Ô∏è Conservador (M√°xima estabilidad)", self)
            conservative_action.triggered.connect(lambda: self.apply_adaptive_preset("conservative"))
            presets_menu.addAction(conservative_action)

    def abrir_muestreo_adaptativo_config(self):
        """Abrir di√°logo de configuraci√≥n del muestreo adaptativo"""
        if not ADAPTIVE_SAMPLING_AVAILABLE:
            QMessageBox.warning(
                self,
                "No disponible",
                "‚ùå El sistema de muestreo adaptativo no est√° disponible.\n\n"
                "Archivos requeridos:\n"
                "‚Ä¢ core/adaptive_sampling.py\n"
                "‚Ä¢ ui/adaptive_sampling_dialog.py"
            )
            return
        
        try:
            # Obtener configuraci√≥n actual desde las c√°maras activas
            current_config = None
            
            # Si hay c√°maras activas, usar la configuraci√≥n de la primera
            if self.camera_widgets:
                for widget in self.camera_widgets:
                    if hasattr(widget, 'get_adaptive_sampling_status'):
                        status = widget.get_adaptive_sampling_status()
                        if status.get('enabled') and hasattr(widget, 'adaptive_controller'):
                            current_config = widget.adaptive_controller.config.copy()
                            break
            
            # Si no hay configuraci√≥n activa, usar balanceada por defecto
            if current_config is None:
                current_config = AdaptiveSamplingConfig.create_config("balanced")
            
            dialog = AdaptiveSamplingConfigDialog(self, current_config)
            dialog.config_changed.connect(self.apply_adaptive_config_to_all_cameras)
            
            if dialog.exec():
                final_config = dialog.get_config()
                self.apply_adaptive_config_to_all_cameras(final_config)
                self.append_debug("‚úÖ Configuraci√≥n de muestreo adaptativo aplicada a todas las c√°maras")
                
        except Exception as e:
            self.append_debug(f"‚ùå Error abriendo configuraci√≥n de muestreo adaptativo: {e}")
            QMessageBox.critical(
                self,
                "Error",
                f"‚ùå Error abriendo configuraci√≥n:\n{e}"
            )

    def apply_adaptive_config_to_all_cameras(self, config):
        """Aplica configuraci√≥n de muestreo adaptativo a todas las c√°maras - M√âTODO CORREGIDO"""
        applied_count = 0

        for widget in self.camera_widgets:
            if hasattr(widget, 'configure_adaptive_sampling'):
                try:
                    success = widget.configure_adaptive_sampling(config)
                    if success:
                        applied_count += 1

                        # Tambi√©n activar el muestreo adaptativo si no estaba activo
                        if hasattr(widget, 'toggle_adaptive_sampling'):
                            widget.toggle_adaptive_sampling(True)
                except Exception as e:
                    cam_ip = "N/A"
                    if hasattr(widget, 'cam_data') and widget.cam_data:
                        cam_ip = widget.cam_data.get('ip', 'N/A')
                    self.append_debug(f"‚ùå Error aplicando config adaptativo a {cam_ip}: {e}")

        if applied_count > 0:
            self.append_debug(f"‚úÖ Configuraci√≥n adaptativa aplicada a {applied_count} c√°maras")
            self.save_adaptive_config_to_global_config(config)
        else:
            self.append_debug("‚ö†Ô∏è No se pudo aplicar configuraci√≥n adaptativa a ninguna c√°mara")

    def save_adaptive_config_to_global_config(self, adaptive_config):
        """Guarda la configuraci√≥n de muestreo adaptativo en config.json"""
        try:
            import json
            import os
            
            config_path = "config.json"
            
            # Leer configuraci√≥n existente
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    config_data = json.load(f)
            else:
                config_data = {"camaras": [], "configuracion": {}}
            
            # Agregar configuraci√≥n global de muestreo adaptativo
            config_data["adaptive_sampling"] = adaptive_config
            
            # Tambi√©n agregar a cada c√°mara individualmente
            for cam in config_data.get("camaras", []):
                cam["adaptive_sampling"] = adaptive_config.copy()
            
            # Guardar archivo
            with open(config_path, 'w') as f:
                json.dump(config_data, f, indent=4)
            
            self.append_debug("üíæ Configuraci√≥n de muestreo adaptativo guardada en config.json")
            
        except Exception as e:
            self.append_debug(f"‚ùå Error guardando configuraci√≥n adaptativa: {e}")

    def show_adaptive_sampling_status(self):
        """Muestra el estado del muestreo adaptativo de todas las c√°maras"""
        if not ADAPTIVE_SAMPLING_AVAILABLE:
            QMessageBox.information(
                self,
                "Muestreo Adaptativo",
                "‚ùå El sistema de muestreo adaptativo no est√° disponible."
            )
            return
        
        status_info = []
        total_cameras = len(self.camera_widgets)
        adaptive_cameras = 0
        
        for i, widget in enumerate(self.camera_widgets):
            cam_ip = "N/A"
            if hasattr(widget, 'cam_data') and widget.cam_data:
                cam_ip = widget.cam_data.get('ip', f'C√°mara {i+1}')
            
            if hasattr(widget, 'get_adaptive_sampling_status'):
                status = widget.get_adaptive_sampling_status()
                
                if status['enabled']:
                    adaptive_cameras += 1
                    status_info.append(
                        f"üì∑ {cam_ip}: üß† ADAPTATIVO\n"
                        f"   ‚Ä¢ Intervalo actual: {status['current_interval']}\n"
                        f"   ‚Ä¢ Actividad: {status.get('activity_score', 0):.2f}\n"
                        f"   ‚Ä¢ Frames procesados: {status['frames_processed']}\n"
                        f"   ‚Ä¢ Eficiencia: {(status['frames_skipped']/status['frames_processed']*100):.1f}% omitidos"
                    )
                else:
                    status_info.append(
                        f"üì∑ {cam_ip}: üìä FIJO\n"
                        f"   ‚Ä¢ Intervalo fijo: {status['current_interval']}\n"
                        f"   ‚Ä¢ Frames procesados: {status['frames_processed']}"
                    )
            else:
                status_info.append(f"üì∑ {cam_ip}: ‚ùå Estado no disponible")
        
        summary = f"""üß† Estado del Muestreo Adaptativo

üìä Resumen:
‚Ä¢ Total de c√°maras: {total_cameras}
‚Ä¢ Usando muestreo adaptativo: {adaptive_cameras}
‚Ä¢ Usando muestreo fijo: {total_cameras - adaptive_cameras}

üì∑ Detalles por c√°mara:
"""
        
        if status_info:
            summary += "\n\n".join(status_info)
        else:
            summary += "No hay c√°maras activas"
        
        QMessageBox.information(self, "Estado del Muestreo Adaptativo", summary)

    def toggle_adaptive_sampling_all(self, enable):
        """Activa/desactiva muestreo adaptativo en todas las c√°maras"""
        if not ADAPTIVE_SAMPLING_AVAILABLE:
            return
        
        affected_count = 0
        mode = "adaptativo" if enable else "fijo"
        
        for widget in self.camera_widgets:
            if hasattr(widget, 'toggle_adaptive_sampling'):
                try:
                    widget.toggle_adaptive_sampling(enable)
                    affected_count += 1
                    
                    # Si se est√° activando, aplicar configuraci√≥n por defecto si es necesario
                    if enable and hasattr(widget, 'configure_adaptive_sampling'):
                        if not hasattr(widget, 'adaptive_controller') or widget.adaptive_controller is None:
                            default_config = AdaptiveSamplingConfig.create_config("balanced")
                            widget.configure_adaptive_sampling(default_config)
                            
                except Exception as e:
                    cam_ip = "N/A"
                    if hasattr(widget, 'cam_data') and widget.cam_data:
                        cam_ip = widget.cam_data.get('ip', 'N/A')
                    self.append_debug(f"‚ùå Error cambiando a modo {mode} en {cam_ip}: {e}")
        
        if affected_count > 0:
            self.append_debug(f"üß† Muestreo {mode} {'activado' if enable else 'desactivado'} en {affected_count} c√°maras")
            
            # Mostrar mensaje de confirmaci√≥n
            QMessageBox.information(
                self,
                "Muestreo Adaptativo",
                f"‚úÖ Muestreo {mode} {'activado' if enable else 'desactivado'} en {affected_count} c√°maras.\n\n"
                f"{'üí° El sistema se adaptar√° autom√°ticamente a la actividad de cada escena.' if enable else 'üìä Todas las c√°maras usar√°n intervalos fijos.'}"
            )
        else:
            self.append_debug("‚ö†Ô∏è No se encontraron c√°maras compatibles con muestreo adaptativo")

    def apply_adaptive_preset(self, preset_name):
        """Aplica un preset de configuraci√≥n adaptativa a todas las c√°maras"""
        if not ADAPTIVE_SAMPLING_AVAILABLE:
            return
        
        try:
            preset_config = AdaptiveSamplingConfig.create_config(preset_name)
            
            # Aplicar a todas las c√°maras
            self.apply_adaptive_config_to_all_cameras(preset_config)
            
            # Descripci√≥n del preset
            preset_descriptions = {
                "aggressive": "‚ö° M√°ximo rendimiento - Adaptaci√≥n r√°pida y agresiva",
                "balanced": "‚öñÔ∏è Balanceado - Equilibrio ideal entre calidad y rendimiento",
                "conservative": "üõ°Ô∏è Conservador - Cambios suaves y m√°xima estabilidad"
            }
            
            description = preset_descriptions.get(preset_name, preset_name)
            
            QMessageBox.information(
                self,
                "Preset Aplicado",
                f"‚úÖ Preset '{preset_name}' aplicado exitosamente.\n\n"
                f"{description}\n\n"
                f"üß† El sistema adaptativo ajustar√° autom√°ticamente la frecuencia\n"
                f"de an√°lisis seg√∫n la actividad detectada en cada c√°mara."
            )
            
        except Exception as e:
            self.append_debug(f"‚ùå Error aplicando preset {preset_name}: {e}")
            QMessageBox.warning(
                self,
                "Error",
                f"‚ùå Error aplicando preset '{preset_name}':\n{e}"
            )

    def toggle_camera_adaptive_sampling(self, camera_index, enable):
        """Activa/desactiva muestreo adaptativo para una c√°mara espec√≠fica"""
        if camera_index >= len(self.camera_widgets):
            return
            
        widget = self.camera_widgets[camera_index]
        cam_ip = "N/A"
        
        if hasattr(widget, 'cam_data') and widget.cam_data:
            cam_ip = widget.cam_data.get('ip', f'C√°mara {camera_index+1}')
        
        if hasattr(widget, 'toggle_adaptive_sampling'):
            try:
                widget.toggle_adaptive_sampling(enable)
                mode = "adaptativo" if enable else "fijo"
                self.append_debug(f"üß† C√°mara {cam_ip}: Muestreo {mode} {'activado' if enable else 'desactivado'}")
                
                # Si se est√° activando y no hay configuraci√≥n, usar la por defecto
                if enable and hasattr(widget, 'configure_adaptive_sampling'):
                    if not hasattr(widget, 'adaptive_controller') or widget.adaptive_controller is None:
                        default_config = AdaptiveSamplingConfig.create_config("balanced")
                        widget.configure_adaptive_sampling(default_config)
                        self.append_debug(f"‚öôÔ∏è Configuraci√≥n adaptativa por defecto aplicada a {cam_ip}")
                        
            except Exception as e:
                self.append_debug(f"‚ùå Error cambiando modo de muestreo en {cam_ip}: {e}")
        else:
            self.append_debug(f"‚ö†Ô∏è C√°mara {cam_ip} no soporta muestreo adaptativo")

    def configure_individual_adaptive_sampling(self, camera_index):
        """Configura muestreo adaptativo para una c√°mara espec√≠fica"""
        if camera_index >= len(self.camera_widgets):
            return
            
        widget = self.camera_widgets[camera_index]
        cam_ip = "N/A"
        
        if hasattr(widget, 'cam_data') and widget.cam_data:
            cam_ip = widget.cam_data.get('ip', f'C√°mara {camera_index+1}')
        
        try:
            # Obtener configuraci√≥n actual de la c√°mara
            current_config = None
            if hasattr(widget, 'adaptive_controller') and widget.adaptive_controller:
                current_config = widget.adaptive_controller.config.copy()
            else:
                current_config = AdaptiveSamplingConfig.create_config("balanced")
            
            dialog = AdaptiveSamplingConfigDialog(self, current_config)
            dialog.setWindowTitle(f"üß† Muestreo Adaptativo - {cam_ip}")
            
            def apply_individual_config(config):
                if hasattr(widget, 'configure_adaptive_sampling'):
                    success = widget.configure_adaptive_sampling(config)
                    if success:
                        self.append_debug(f"‚úÖ Configuraci√≥n adaptativa aplicada a {cam_ip}")
                        # Activar si no estaba activo
                        if hasattr(widget, 'toggle_adaptive_sampling'):
                            widget.toggle_adaptive_sampling(True)
                    else:
                        self.append_debug(f"‚ùå Error aplicando configuraci√≥n a {cam_ip}")
            
            dialog.config_changed.connect(apply_individual_config)
            
            if dialog.exec():
                final_config = dialog.get_config()
                apply_individual_config(final_config)
                
        except Exception as e:
            self.append_debug(f"‚ùå Error configurando muestreo adaptativo para {cam_ip}: {e}")

    def show_individual_adaptive_stats(self, camera_index):
        """Muestra estad√≠sticas detalladas de muestreo adaptativo para una c√°mara"""
        if camera_index >= len(self.camera_widgets):
            return
            
        widget = self.camera_widgets[camera_index]
        cam_ip = "C√°mara desconocida"
        
        if hasattr(widget, 'cam_data') and widget.cam_data:
            cam_ip = widget.cam_data.get('ip', f'C√°mara {camera_index+1}')
        
        if hasattr(widget, 'get_adaptive_sampling_status'):
            status = widget.get_adaptive_sampling_status()
            
            if status['enabled']:
                # Estad√≠sticas detalladas para muestreo adaptativo
                efficiency = 0
                if status['frames_processed'] > 0:
                    efficiency = (status['frames_skipped'] / status['frames_processed']) * 100
                
                stats_message = f"""üß† Estad√≠sticas de Muestreo Adaptativo
üì∑ C√°mara: {cam_ip}

üìä Estado Actual:
‚Ä¢ Modo: Adaptativo
‚Ä¢ Intervalo actual: {status['current_interval']} frames
‚Ä¢ Puntuaci√≥n de actividad: {status.get('activity_score', 0):.3f}
‚Ä¢ Promedio de detecciones: {status.get('avg_detections', 0):.2f}

üìà Rendimiento:
‚Ä¢ Total frames procesados: {status['frames_processed']:,}
‚Ä¢ Frames analizados: {status['frames_processed'] - status['frames_skipped']:,}
‚Ä¢ Frames omitidos: {status['frames_skipped']:,}
‚Ä¢ Eficiencia: {efficiency:.1f}% frames omitidos

üí° Significado:
‚Ä¢ Intervalo alto (>15) = Poca actividad detectada
‚Ä¢ Intervalo bajo (<8) = Mucha actividad detectada
‚Ä¢ M√°s eficiencia = Mejor optimizaci√≥n autom√°tica"""
                
                if hasattr(widget, 'adaptive_controller') and widget.adaptive_controller:
                    controller_status = widget.adaptive_controller.get_status()
                    
                    stats_message += f"""

‚öôÔ∏è Configuraci√≥n Actual:
‚Ä¢ Intervalo base: {controller_status['config']['base_interval']}
‚Ä¢ Rango: {controller_status['config']['min_interval']}-{controller_status['config']['max_interval']}
‚Ä¢ Velocidad adaptaci√≥n: {controller_status['config']['adaptation_rate']:.1%}
‚Ä¢ Umbral actividad alta: {controller_status['config']['high_activity_threshold']:.1%}"""
                
            else:
                # Estad√≠sticas para muestreo fijo
                efficiency = 0
                if status['frames_processed'] > 0:
                    efficiency = (status['frames_skipped'] / status['frames_processed']) * 100
                
                stats_message = f"""üìä Estad√≠sticas de Muestreo Fijo
üì∑ C√°mara: {cam_ip}

üìä Estado Actual:
‚Ä¢ Modo: Fijo
‚Ä¢ Intervalo fijo: {status['current_interval']} frames

üìà Rendimiento:
‚Ä¢ Total frames procesados: {status['frames_processed']:,}
‚Ä¢ Frames analizados: {status['frames_processed'] - status['frames_skipped']:,}
‚Ä¢ Frames omitidos: {status['frames_skipped']:,}
‚Ä¢ Frecuencia an√°lisis: {100 - efficiency:.1f}% frames analizados

üí° Recomendaci√≥n:
El muestreo adaptativo puede optimizar autom√°ticamente
el rendimiento basado en la actividad de la escena."""
            
            QMessageBox.information(self, f"Estad√≠sticas - {cam_ip}", stats_message)
        else:
            QMessageBox.warning(self, "Error", f"No se pueden obtener estad√≠sticas para {cam_ip}")

    def abrir_fps_config(self):
        """Abrir di√°logo de configuraci√≥n de FPS"""
        dialog = FPSConfigDialog(self, self.fps_config)
        dialog.fps_config_changed.connect(self.update_fps_config)
        
        if dialog.exec():
            self.fps_config = dialog.get_config()
            self.apply_fps_to_all_cameras()
            self.append_debug(f"‚öôÔ∏è Configuraci√≥n de FPS aplicada: {self.fps_config}")
    
    def update_fps_config(self, config):
        """Actualizar configuraci√≥n de FPS en tiempo real"""
        self.fps_config = config
        self.apply_fps_to_all_cameras()
        self.append_debug(f"üéØ FPS actualizado en tiempo real: Visual={config['visual_fps']}, "
                         f"Detecci√≥n={config['detection_fps']}, UI={config['ui_update_fps']}")
    
    def apply_fps_to_all_cameras(self):
        """Aplicar configuraci√≥n de FPS a todas las c√°maras activas"""
        for widget in self.camera_widgets:
            try:
                # Actualizar GrillaWidget
                if hasattr(widget, 'set_fps_config'):
                    widget.set_fps_config(
                        visual_fps=self.fps_config['visual_fps'],
                        detection_fps=self.fps_config['detection_fps'],
                        ui_update_fps=self.fps_config['ui_update_fps']
                    )
                
                # Actualizar VisualizadorDetector
                if hasattr(widget, 'visualizador') and widget.visualizador:
                    if hasattr(widget.visualizador, 'update_fps_config'):
                        widget.visualizador.update_fps_config(
                            visual_fps=self.fps_config['visual_fps'],
                            detection_fps=self.fps_config['detection_fps']
                        )
                        
            except Exception as e:
                self.append_debug(f"‚ùå Error aplicando FPS a c√°mara: {e}")

    def get_optimized_fps_for_camera(self, camera_data):
        """Obtener configuraci√≥n de FPS optimizada seg√∫n el tipo de c√°mara"""
        base_config = self.fps_config.copy()
        
        # Ajustar seg√∫n el tipo de c√°mara
        camera_type = camera_data.get('tipo', 'fija')
        models = camera_data.get('modelos', [camera_data.get('modelo', 'Personas')])
        
        if camera_type == 'ptz':
            # PTZ necesita m√°s FPS para seguimiento fluido
            base_config['visual_fps'] = min(30, base_config['visual_fps'] + 5)
            base_config['detection_fps'] = min(15, base_config['detection_fps'] + 2)
        
        if 'Embarcaciones' in models or 'Barcos' in models:
            # Detecci√≥n mar√≠tima puede necesitar menos FPS
            base_config['detection_fps'] = max(3, base_config['detection_fps'] - 2)
        
        return base_config

    def append_debug(self, message: str):
        """Agregar mensaje al debug console, filtrando spam innecesario"""
        if any(substr in message for substr in ["hevc @", "VPS 0", "undecodable NALU", "Frame procesado"]):
            return
        self.debug_console.append(message)

    def setup_inicio_ui(self):
        """Configura la interfaz principal con splitter"""
        # --- Parte superior: c√°maras ---
        self.video_grid = QGridLayout()
        video_grid_container_widget = QWidget()
        video_grid_container_widget.setLayout(self.video_grid)

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll_area.setWidget(video_grid_container_widget)

        # --- Parte inferior: lista + log + resumen ---
        bottom_layout = QHBoxLayout()
    
        self.camera_list = QListWidget()
        self.camera_list.setFixedWidth(250)
        self.camera_list.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.camera_list.customContextMenuRequested.connect(self.show_camera_menu)
        bottom_layout.addWidget(self.camera_list)

        self.debug_console = QTextEdit()
        self.debug_console.setReadOnly(True)
        bottom_layout.addWidget(self.debug_console, 2)

        self.resumen_widget = ResumenDeteccionesWidget()
        self.resumen_widget.log_signal.connect(self.append_debug)
        bottom_layout.addWidget(self.resumen_widget, 1)

        bottom_widget = QWidget()
        bottom_widget.setLayout(bottom_layout)

        # --- Dividir con splitter vertical ---
        splitter = QSplitter(Qt.Orientation.Vertical)
        splitter.addWidget(scroll_area)
        splitter.addWidget(bottom_widget)
        splitter.setSizes([1, 1])  # 50% y 50%

        self.init_tab_layout.addWidget(splitter)

    def open_camera_dialog(self, index=None):
        """Abrir di√°logo para agregar/editar c√°mara"""
        print("üõ†Ô∏è [DEBUG] Ejecutando open_camera_dialog")
        if index is not None and index >= len(self.camera_data_list):
            return
        existing = self.camera_data_list[index] if index is not None else None
        dialog = CameraDialog(self, existing_data=existing)
        if dialog.exec(): 
            if dialog.result() == 1: 
                new_data = dialog.get_camera_data()
                if index is not None:
                    self.camera_data_list[index] = new_data
                    self.camera_list.item(index).setText(f"{new_data['ip']} - {new_data['tipo']}")
                    self.append_debug(f"‚úèÔ∏è C√°mara editada: {new_data}")
                    self.start_camera_stream(new_data) 
                else:
                    self.camera_data_list.append(new_data)
                    self.camera_list.addItem(f"{new_data['ip']} - {new_data['tipo']}")
                    self.append_debug(f"‚úÖ C√°mara agregada: {new_data}")
                    self.start_camera_stream(new_data)
                guardar_camaras(self)
                
                # Reinicializar sistema PTZ si se agreg√≥ una c√°mara PTZ
                if new_data.get('tipo') == 'ptz':
                    self._initialize_ptz_system()

    def open_ptz_dialog(self):
        """Abre el di√°logo b√°sico de PTZ"""
        try:
            from ui.ptz_tracking_dialog import PTZTrackingDialog
            dialog = PTZTrackingDialog(self, self.camera_data_list)
            dialog.exec()
        except ImportError as e:
            self.append_debug(f"‚ùå Error: No se pudo cargar el di√°logo PTZ b√°sico: {e}")
            QMessageBox.warning(
                self,
                "M√≥dulo PTZ no disponible",
                f"‚ùå No se pudo cargar el control PTZ b√°sico:\n{e}\n\n"
                f"Archivos requeridos:\n"
                f"‚Ä¢ ui/ptz_tracking_dialog.py\n"
                f"‚Ä¢ core/ptz_control.py\n\n"
                f"Dependencias:\n"
                f"‚Ä¢ pip install onvif-zeep"
            )
        except Exception as e:
            self.append_debug(f"‚ùå Error inesperado abriendo PTZ b√°sico: {e}")

    def open_ptz_presets_dialog(self):
        """Abre el di√°logo avanzado de gesti√≥n PTZ - VERSI√ìN CORREGIDA"""
        try:
            # Verificar que hay c√°maras PTZ disponibles
            ptz_cameras = [cam for cam in self.camera_data_list if cam.get('tipo') == 'ptz']
            
            if not ptz_cameras:
                QMessageBox.warning(
                    self,
                    "Sin c√°maras PTZ",
                    "‚ùå No se encontraron c√°maras PTZ configuradas.\n\n"
                    "Para usar la gesti√≥n avanzada PTZ:\n"
                    "1. Agregue al menos una c√°mara con tipo 'ptz'\n"
                    "2. Aseg√∫rese de que las credenciales sean correctas\n"
                    "3. Verifique la conexi√≥n de red"
                )
                self.append_debug("‚ö†Ô∏è No hay c√°maras PTZ para gesti√≥n avanzada")
                return
            
            from ui.ptz_preset_dialog import PTZPresetDialog
            
            # Asegurar que el sistema PTZ est√° inicializado
            if not self._ptz_initialized:
                self._initialize_ptz_system()
            
            # CORRECCI√ìN: Pasar la lista de c√°maras correctamente
            dialog = PTZPresetDialog(self, camera_list=self.camera_data_list)
            
            # Conectar se√±ales del di√°logo
            dialog.preset_updated.connect(
                lambda preset_num, preset_name: self.append_debug(
                    f"üìç Preset {preset_num} actualizado: '{preset_name}'"
                )
            )
            
            # Mostrar informaci√≥n de c√°maras PTZ encontradas
            self.append_debug(f"üéØ Abriendo gesti√≥n PTZ para {len(ptz_cameras)} c√°maras:")
            for cam in ptz_cameras:
                ip = cam.get('ip', 'N/A')
                usuario = cam.get('usuario', 'N/A')
                self.append_debug(f"   üìπ {ip} ({usuario})")
            
            dialog.exec()
            
        except ImportError as e:
            self.append_debug(f"‚ùå Error: No se pudo cargar el di√°logo PTZ avanzado: {e}")
            self.append_debug("üí° Aseg√∫rese de que el archivo ui/ptz_preset_dialog.py est√© presente")
            QMessageBox.critical(
                self,
                "M√≥dulo no encontrado",
                f"‚ùå No se pudo cargar el di√°logo PTZ avanzado:\n{e}\n\n"
                f"Archivos requeridos:\n"
                f"‚Ä¢ ui/ptz_preset_dialog.py\n"
                f"‚Ä¢ core/ptz_control_enhanced.py (opcional)"
            )
        except Exception as e:
            self.append_debug(f"‚ùå Error inesperado al abrir di√°logo PTZ: {e}")
            import traceback
            traceback.print_exc()  # Para debugging
            QMessageBox.critical(
                self,
                "Error inesperado",
                f"‚ùå Error inesperado al abrir di√°logo PTZ:\n{e}\n\n"
                f"Revise la consola para m√°s detalles."
            )

    def open_ptz_calibration(self):
        """Abrir calibraci√≥n PTZ"""
        try:
            from ui.ptz_calibration_dialog import create_calibration_dialog

            selected_camera = None
            for cam in self.camera_data_list:
                if cam.get('tipo') == 'ptz':
                    selected_camera = cam
                    break

            if not selected_camera:
                QMessageBox.warning(
                    self,
                    "Sin c√°maras PTZ",
                    "No se encontraron c√°maras PTZ configuradas."
                )
                return

            dialog = create_calibration_dialog(self, selected_camera)
            if dialog:
                dialog.calibration_completed.connect(self._on_calibration_completed)
                dialog.exec()

        except Exception as e:
            self.append_debug(f"‚ùå Error abriendo calibraci√≥n: {e}")

    def _on_calibration_completed(self, camera_ip):
        """Manejar calibraci√≥n completada"""

        self.append_debug(f"‚úÖ Calibraci√≥n completada para {camera_ip}")

    def initialize_ptz_system(self):
        """Inicializa manualmente el sistema PTZ"""
        try:
            # Intentar cargar el sistema PTZ mejorado
            try:
                from core.ptz_control_enhanced import initialize_ptz_system
                success = initialize_ptz_system()
                enhanced_available = True
            except ImportError:
                # Fallback a sistema b√°sico
                enhanced_available = False
                success = True  # Asumir √©xito para sistema b√°sico
            
            if success:
                self._ptz_initialized = True
                ptz_cameras = [cam for cam in self.camera_data_list if cam.get('tipo') == 'ptz']
                
                if enhanced_available:
                    self.append_debug(f"üöÄ Sistema PTZ mejorado inicializado con {len(ptz_cameras)} c√°maras PTZ")
                else:
                    self.append_debug(f"üöÄ Sistema PTZ b√°sico inicializado con {len(ptz_cameras)} c√°maras PTZ")
                
                # Listar c√°maras PTZ encontradas
                for cam in ptz_cameras:
                    self.append_debug(f"üìπ PTZ detectada: {cam.get('ip')} ({cam.get('usuario')})")
            else:
                self.append_debug("‚ö†Ô∏è No se encontraron c√°maras PTZ v√°lidas")
                
        except Exception as e:
            self.append_debug(f"‚ùå Error inicializando sistema PTZ: {e}")

    def stop_all_ptz(self):
        """Detiene todas las c√°maras PTZ"""
        try:
            # Intentar usar sistema PTZ mejorado
            try:
                from core.ptz_control_enhanced import get_ptz_system_status
                # Sistema mejorado disponible
                stopped_count = 0
                for cam in self.camera_data_list:
                    if cam.get('tipo') == 'ptz':
                        # Aqu√≠ se implementar√≠a la l√≥gica de parada espec√≠fica
                        stopped_count += 1
                
                self.append_debug(f"‚èπÔ∏è {stopped_count} c√°maras PTZ detenidas (sistema mejorado)")
                
            except ImportError:
                # Fallback a sistema b√°sico
                stopped_count = 0
                for cam in self.camera_data_list:
                    if cam.get('tipo') == 'ptz':
                        stopped_count += 1
                
                self.append_debug(f"‚èπÔ∏è {stopped_count} c√°maras PTZ detenidas (sistema b√°sico)")
            
        except Exception as e:
            self.append_debug(f"‚ùå Error deteniendo PTZ: {e}")

    def toggle_line_edit(self):
        """Activar/desactivar modo de edici√≥n de l√≠nea de cruce"""
        items = self.camera_list.selectedItems()
        if not items:
            self.append_debug("‚ö†Ô∏è Seleccione una c√°mara para editar l√≠nea de cruce")
            return
        index = self.camera_list.row(items[0])
        if index >= len(self.camera_widgets):
            return
        widget = self.camera_widgets[index]
        if hasattr(widget, 'cross_line_edit_mode'):
            if widget.cross_line_edit_mode:
                widget.finish_line_edit()
                self.append_debug("‚úÖ Modo edici√≥n de l√≠nea desactivado")
            else:
                widget.start_line_edit()
                self.append_debug("üìè Modo edici√≥n de l√≠nea activado - Click y arrastre para definir l√≠nea")
        else:
            self.append_debug("‚ùå Widget de c√°mara no soporta edici√≥n de l√≠nea")

    def start_camera_stream(self, camera_data):
        """Iniciar stream de c√°mara con configuraci√≥n optimizada"""
        # Agregar configuraci√≥n de FPS optimizada a los datos de la c√°mara
        optimized_fps = self.get_optimized_fps_for_camera(camera_data)
        camera_data['fps_config'] = optimized_fps

        # Verificar si ya existe un widget para esta IP y reemplazarlo
        for i, widget in enumerate(self.camera_widgets):
            if hasattr(widget, 'cam_data') and widget.cam_data.get('ip') == camera_data.get('ip'):
                print(f"INFO: Reemplazando widget para c√°mara IP: {camera_data.get('ip')}")
                widget.detener()
                self.video_grid.removeWidget(widget) 
                widget.deleteLater()
                self.camera_widgets.pop(i)
                break
        
        # Buscar el contenedor del grid de video
        video_grid_container_widget = None
        for i in range(self.init_tab_layout.count()):
            item = self.init_tab_layout.itemAt(i)
            if hasattr(item, 'widget') and isinstance(item.widget(), QSplitter):
                splitter = item.widget()
                if splitter.count() > 0:
                    scroll_area = splitter.widget(0)
                    if isinstance(scroll_area, QScrollArea):
                        video_grid_container_widget = scroll_area.widget()
                        break

        # Importar din√°micamente GrillaWidget
        try:
            grilla_widget_module = importlib.import_module("gui.grilla_widget")
            GrillaWidget_class = grilla_widget_module.GrillaWidget
        except ImportError as e:
            print(f"ERROR: No se pudo importar GrillaWidget: {e}")
            self.append_debug(f"ERROR: No se pudo importar GrillaWidget: {e}")
            return

        # Crear widget de c√°mara
        parent_widget = video_grid_container_widget if video_grid_container_widget else self
        video_widget = GrillaWidget_class(parent=parent_widget, fps_config=optimized_fps) 
        
        video_widget.cam_data = camera_data 
        video_widget.log_signal.connect(self.append_debug)
        
        # Posicionar en grid (una fila, m√∫ltiples columnas)
        row = 0
        col = len(self.camera_widgets) 
        
        self.video_grid.addWidget(video_widget, row, col)
        self.camera_widgets.append(video_widget) 
        
        # Iniciar vista de c√°mara
        video_widget.mostrar_vista(camera_data) 
        video_widget.show()
        self.append_debug(f"üé• Reproduciendo: {camera_data.get('ip', 'IP Desconocida')} con FPS optimizado")

    def show_camera_menu(self, position):
        """Mostrar men√∫ contextual para c√°maras - VERSI√ìN ACTUALIZADA CON MUESTREO ADAPTATIVO"""
        item = self.camera_list.itemAt(position)
        if item:
            index = self.camera_list.row(item)
            menu = QMenu()
            edit_action = menu.addAction("‚úèÔ∏è Editar C√°mara")
            delete_action = menu.addAction("üóëÔ∏è Eliminar C√°mara")
            stop_action = menu.addAction("‚õî Detener Visual") 
            fps_action = menu.addAction("üéØ Configurar FPS Individual")
            
            # NUEVA SECCI√ìN: Muestreo Adaptativo
            if ADAPTIVE_SAMPLING_AVAILABLE and index < len(self.camera_widgets):
                widget = self.camera_widgets[index]
                
                if hasattr(widget, 'get_adaptive_sampling_status'):
                    menu.addSeparator()
                    adaptive_menu = menu.addMenu("üß† Muestreo Adaptativo")
                    
                    status = widget.get_adaptive_sampling_status()
                    
                    if status['enabled']:
                        # Muestreo adaptativo activo
                        status_action = adaptive_menu.addAction(f"üìä Estado: Activo (Intervalo: {status['current_interval']})")
                        status_action.setEnabled(False)  # Solo informativo
                        
                        disable_action = adaptive_menu.addAction("üìä Cambiar a Fijo")
                        disable_action.triggered.connect(lambda: self.toggle_camera_adaptive_sampling(index, False))
                        
                        config_action = adaptive_menu.addAction("‚öôÔ∏è Configurar Individual")
                        config_action.triggered.connect(lambda: self.configure_individual_adaptive_sampling(index))
                        
                        stats_action = adaptive_menu.addAction("üìà Ver Estad√≠sticas")
                        stats_action.triggered.connect(lambda: self.show_individual_adaptive_stats(index))
                        
                    else:
                        # Muestreo fijo activo
                        status_action = adaptive_menu.addAction(f"üìä Estado: Fijo (Intervalo: {status['current_interval']})")
                        status_action.setEnabled(False)  # Solo informativo
                        
                        enable_action = adaptive_menu.addAction("üß† Cambiar a Adaptativo")
                        enable_action.triggered.connect(lambda: self.toggle_camera_adaptive_sampling(index, True))
            
            # Men√∫ espec√≠fico para c√°maras PTZ
            cam_data = self.camera_data_list[index] if index < len(self.camera_data_list) else {}
            if cam_data.get('tipo') == 'ptz':
                menu.addSeparator()
                ptz_control_action = menu.addAction("üéÆ Control PTZ")
                ptz_presets_action = menu.addAction("üìç Gesti√≥n de Presets")
                ptz_stop_action = menu.addAction("‚èπÔ∏è Detener PTZ")
                
            action = menu.exec(self.camera_list.mapToGlobal(position))

            if action == edit_action:
                self.open_camera_dialog(index=index) 
            elif action == delete_action:
                cam_to_delete_data = self.camera_data_list.pop(index)
                self.camera_list.takeItem(index) 
                for i, widget in enumerate(self.camera_widgets):
                    if hasattr(widget, 'cam_data') and widget.cam_data.get('ip') == cam_to_delete_data.get('ip'):
                        widget.detener()
                        self.video_grid.removeWidget(widget)
                        widget.deleteLater()
                        self.camera_widgets.pop(i)
                        self.append_debug(f"üóëÔ∏è C√°mara {cam_to_delete_data.get('ip')} y su widget eliminados.")
                        break
                guardar_camaras(self) 
            elif action == stop_action:
                cam_ip_to_stop = self.camera_data_list[index].get('ip')
                for i, widget in enumerate(self.camera_widgets):
                     if hasattr(widget, 'cam_data') and widget.cam_data.get('ip') == cam_ip_to_stop:
                        widget.detener()
                        self.append_debug(f"‚õî Visual detenida para: {cam_ip_to_stop}")
                        break
            elif action == fps_action:
                self.configure_individual_fps(index)
            elif cam_data.get('tipo') == 'ptz':
                if action == ptz_control_action:
                    self.open_ptz_dialog()
                elif action == ptz_presets_action:
                    self.open_ptz_presets_dialog()
                elif action == ptz_stop_action:
                    try:
                        # Intentar detener PTZ espec√≠fica
                        ip = cam_data.get('ip')
                        self.append_debug(f"‚èπÔ∏è Deteniendo PTZ {ip}")
                        # Aqu√≠ se implementar√≠a la l√≥gica espec√≠fica de parada
                    except Exception as e:
                        self.append_debug(f"‚ùå Error deteniendo PTZ: {e}")

    def configure_individual_fps(self, camera_index):
        """Configurar FPS individual para una c√°mara espec√≠fica"""
        if camera_index >= len(self.camera_widgets):
            return
            
        widget = self.camera_widgets[camera_index]
        current_fps = widget.fps_config if hasattr(widget, 'fps_config') else self.fps_config
        
        dialog = FPSConfigDialog(self, current_fps)
        dialog.setWindowTitle(f"üéØ FPS para {self.camera_data_list[camera_index].get('ip', 'C√°mara')}")
        
        def apply_individual_fps(config):
            widget.set_fps_config(
                visual_fps=config['visual_fps'],
                detection_fps=config['detection_fps'],
                ui_update_fps=config['ui_update_fps']
            )
            self.append_debug(f"üéØ FPS individual aplicado a {widget.cam_data.get('ip', 'C√°mara')}")
        
        dialog.fps_config_changed.connect(apply_individual_fps)
        dialog.exec()

    def restart_all_cameras(self):
        """Reiniciar todas las c√°maras con nueva configuraci√≥n"""
        self.append_debug("üîÑ Reiniciando todas las c√°maras...")
        
        # Detener todos los widgets existentes
        for widget in list(self.camera_widgets):
            try:
                if hasattr(widget, 'detener') and callable(widget.detener):
                    widget.detener()
                self.video_grid.removeWidget(widget)
                widget.deleteLater()
            except Exception as e:
                print(f"ERROR al detener c√°mara: {e}")
        
        self.camera_widgets.clear()
        
        # Reiniciar todas las c√°maras
        for cam in self.camera_data_list:
            self.start_camera_stream(cam)
            

    def closeEvent(self, event):
        """Manejar cierre de aplicaci√≥n con limpieza completa"""
        print("INFO: Iniciando proceso de cierre de MainGUI...")
        
        # Detener sistema PTZ
        try:
            if self._ptz_initialized:
                self.stop_all_ptz()
                print("INFO: Sistema PTZ detenido")
        except Exception as e:
            print(f"ERROR deteniendo sistema PTZ: {e}")

        # ‚úÖ AGREGAR: Limpiar sistema PTZ
        self.cleanup_ptz_system()
        
        # Detener widgets de c√°mara
        print(f"INFO: Deteniendo {len(self.camera_widgets)} widgets de c√°mara activos...")
        for widget in self.camera_widgets:
            try:
                if hasattr(widget, 'detener') and callable(widget.detener):
                    cam_ip = "N/A"
                    if hasattr(widget, 'cam_data') and widget.cam_data:
                        cam_ip = widget.cam_data.get('ip', 'N/A')
                    print(f"INFO: Llamando a detener() para el widget de la c√°mara IP: {cam_ip}")
                    widget.detener()
                else:
                    cam_ip_info = "N/A"
                    if hasattr(widget, 'cam_data') and widget.cam_data:
                         cam_ip_info = widget.cam_data.get('ip', 'N/A')
                    print(f"WARN: El widget para IP {cam_ip_info} no tiene el m√©todo detener() o no es callable.")
            except Exception as e:
                cam_ip_err = "N/A"
                if hasattr(widget, 'cam_data') and widget.cam_data:
                    cam_ip_err = widget.cam_data.get('ip', 'N/A')
                print(f"ERROR: Excepci√≥n al detener widget para IP {cam_ip_err}: {e}")
        
        # Detener widget de resumen
        if hasattr(self, 'resumen_widget') and self.resumen_widget: 
            if hasattr(self.resumen_widget, 'stop_threads') and callable(self.resumen_widget.stop_threads):
                print("INFO: Llamando a stop_threads() para resumen_widget...")
                try:
                    self.resumen_widget.stop_threads()
                except Exception as e:
                    print(f"ERROR: Excepci√≥n al llamar a stop_threads() en resumen_widget: {e}")
            else:
                print("WARN: resumen_widget no tiene el m√©todo stop_threads() o no es callable.")
        else:
            print("WARN: self.resumen_widget no existe, no se pueden detener sus hilos.")

        # Guardar configuraci√≥n final
        try:
            guardar_camaras(self)
            print("INFO: Configuraci√≥n guardada antes del cierre")
        except Exception as e:
            print(f"ERROR guardando configuraci√≥n: {e}")

        # Profiling - guardar estad√≠sticas
        print("INFO: Deteniendo profiler y guardando estad√≠sticas...")
        try:
            self.profiler.disable()
            stats_filename = "main_gui_profile.prof"
            self.profiler.dump_stats(stats_filename)
            print(f"INFO: Resultados del profiler guardados en {stats_filename}")

            # Mostrar resumen de estad√≠sticas
            s = io.StringIO()
            ps = pstats.Stats(self.profiler, stream=s).sort_stats('cumulative', 'tottime')
            ps.print_stats(30)
            print("\n--- Resumen del Profiler (Top 30 por tiempo acumulado) ---")
            print(s.getvalue())
            print("--- Fin del Resumen del Profiler ---\n")
        except Exception as e:
            print(f"ERROR en profiling: {e}")

        print("INFO: Proceso de cierre de MainGUI completado. Aceptando evento.")
        event.accept()