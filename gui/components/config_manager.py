# gui/components/config_manager.py
"""
Gesti√≥n de configuraci√≥n y persistencia.
Responsabilidades:
- Carga y guardado de configuraci√≥n desde/hacia archivos
- Gesti√≥n de configuraci√≥n de c√°maras
- Persistencia de estados de celdas
- Configuraci√≥n de PTZ y presets
- Backup y restauraci√≥n
- Migraci√≥n de configuraciones
"""

import json
import os
import shutil
import time
from datetime import datetime
from typing import Dict, Any, Optional, List, Tuple
from PyQt6.QtCore import QObject, pyqtSignal
from pathlib import Path


class ConfigManager(QObject):
    """Gestor de configuraci√≥n y persistencia"""
    
    # Se√±ales
    config_loaded = pyqtSignal(dict)  # Configuraci√≥n cargada
    config_saved = pyqtSignal(str)    # Ruta donde se guard√≥
    config_error = pyqtSignal(str)    # Error en configuraci√≥n
    log_message = pyqtSignal(str)     # Mensaje de log
    
    def __init__(self, config_file_path="config.json", parent=None):
        super().__init__(parent)
        self.config_file_path = Path(config_file_path)
        self.backup_dir = Path("config_backups")
        
        # Configuraci√≥n actual en memoria
        self.current_config: Dict[str, Any] = {}
        
        # Configuraci√≥n por defecto
        self.default_config = {
            "version": "1.0",
            "created": datetime.now().isoformat(),
            "camaras": [],
            "grid_settings": {
                "filas": 18,
                "columnas": 22,
                "cell_presets": {},
                "cell_ptz_map": {},
                "discarded_cells": [],
                "selected_cells": [],
                "temporal_cells": []
            },
            "ptz_settings": {
                "auto_trigger_enabled": True,
                "ptz_cooldown": 2.0,
                "default_zoom": 0.4,
                "movement_threshold": 20
            },
            "detection_settings": {
                "confidence_threshold": 0.5,
                "min_object_size": 100,
                "detection_cooldown": 1.0,
                "debug_enabled": False
            },
            "visual_settings": {
                "theme": "dark",
                "grid_lines_enabled": True,
                "animations_enabled": True,
                "adaptive_info_enabled": False
            },
            "system_settings": {
                "auto_save_interval": 300,  # 5 minutos
                "max_backups": 10,
                "log_level": "INFO"
            }
        }
        
        # Estado de auto-guardado
        self.auto_save_enabled = True
        self.last_save_time = 0
        self.unsaved_changes = False
        
        # Crear directorio de backups si no existe
        self.backup_dir.mkdir(exist_ok=True)
        
    def _emit_log(self, message: str):
        """Emite mensaje de log"""
        self.log_message.emit(message)
    
    # === CARGA DE CONFIGURACI√ìN ===
    
    def load_configuration(self) -> Dict[str, Any]:
        """
        Carga la configuraci√≥n desde archivo
        
        Returns:
            Diccionario con la configuraci√≥n cargada
        """
        try:
            if not self.config_file_path.exists():
                self._emit_log(f"üìÑ Archivo de configuraci√≥n no encontrado: {self.config_file_path}")
                self._emit_log("üîß Creando configuraci√≥n por defecto...")
                return self._create_default_config()
            
            with open(self.config_file_path, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
            
            # Validar y migrar configuraci√≥n si es necesario
            validated_config = self._validate_and_migrate_config(config_data)
            
            self.current_config = validated_config
            self.unsaved_changes = False
            self.last_save_time = time.time()
            
            self._emit_log(f"‚úÖ Configuraci√≥n cargada desde: {self.config_file_path}")
            self.config_loaded.emit(validated_config)
            
            return validated_config
            
        except json.JSONDecodeError as e:
            self._emit_log(f"‚ùå Error de formato JSON: {e}")
            return self._handle_corrupted_config()
        except Exception as e:
            self._emit_log(f"‚ùå Error cargando configuraci√≥n: {e}")
            self.config_error.emit(str(e))
            return self._create_default_config()
    
    def _create_default_config(self) -> Dict[str, Any]:
        """Crea configuraci√≥n por defecto"""
        self.current_config = self.default_config.copy()
        self.unsaved_changes = True
        
        # Guardar configuraci√≥n por defecto
        self.save_configuration()
        
        return self.current_config
    
    def _validate_and_migrate_config(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Valida y migra configuraci√≥n a la versi√≥n actual"""
        # Detectar versi√≥n
        version = config_data.get("version", "0.9")
        
        if version != self.default_config["version"]:
            self._emit_log(f"üîÑ Migrando configuraci√≥n de v{version} a v{self.default_config['version']}")
            config_data = self._migrate_config(config_data, version)
        
        # Asegurar que todas las secciones existen
        for section, default_values in self.default_config.items():
            if section not in config_data:
                config_data[section] = default_values
                self._emit_log(f"‚ûï Secci√≥n agregada: {section}")
            elif isinstance(default_values, dict):
                # Merge de configuraciones anidadas
                for key, value in default_values.items():
                    if key not in config_data[section]:
                        config_data[section][key] = value
                        self._emit_log(f"‚ûï Configuraci√≥n agregada: {section}.{key}")
        
        return config_data
    
    def _migrate_config(self, config_data: Dict[str, Any], from_version: str) -> Dict[str, Any]:
        """Migra configuraci√≥n desde versi√≥n anterior"""
        migrated_config = config_data.copy()
        
        # Crear backup antes de migraci√≥n
        backup_path = self._create_backup(f"migration_from_v{from_version}")
        self._emit_log(f"üíæ Backup de migraci√≥n creado: {backup_path}")
        
        # Migraci√≥n espec√≠fica por versi√≥n
        if from_version == "0.9":
            migrated_config = self._migrate_from_v09(migrated_config)
        
        # Actualizar versi√≥n
        migrated_config["version"] = self.default_config["version"]
        migrated_config["migrated_from"] = from_version
        migrated_config["migration_date"] = datetime.now().isoformat()
        
        return migrated_config
    
    def _migrate_from_v09(self, config_data: Dict[str, Any]) -> Dict[str, Any]:
        """Migraci√≥n espec√≠fica desde v0.9"""
        # Reorganizar estructura de c√°maras si es necesario
        if "camaras" in config_data:
            for camera in config_data["camaras"]:
                # Agregar campos nuevos con valores por defecto
                if "rtsp_port" not in camera:
                    camera["rtsp_port"] = 554
                if "modelo" not in camera:
                    camera["modelo"] = ""
        
        # Migrar configuraci√≥n de grilla si existe en formato anterior
        if "celdas_descartadas" in config_data:
            if "grid_settings" not in config_data:
                config_data["grid_settings"] = {}
            config_data["grid_settings"]["discarded_cells"] = config_data.pop("celdas_descartadas")
        
        return config_data
    
    def _handle_corrupted_config(self) -> Dict[str, Any]:
        """Maneja configuraci√≥n corrupta"""
        # Crear backup del archivo corrupto
        corrupted_backup = self.config_file_path.with_suffix(f".corrupted_{int(time.time())}")
        shutil.copy2(self.config_file_path, corrupted_backup)
        
        self._emit_log(f"üíæ Archivo corrupto respaldado como: {corrupted_backup}")
        self._emit_log("üîß Creando nueva configuraci√≥n por defecto...")
        
        return self._create_default_config()
    
    # === GUARDADO DE CONFIGURACI√ìN ===
    
    def save_configuration(self, config_data: Optional[Dict[str, Any]] = None) -> bool:
        """
        Guarda la configuraci√≥n actual
        
        Args:
            config_data: Configuraci√≥n a guardar (usa current_config si es None)
            
        Returns:
            True si se guard√≥ exitosamente
        """
        try:
            if config_data is None:
                config_data = self.current_config
            
            # Actualizar timestamp
            config_data["last_modified"] = datetime.now().isoformat()
            
            # Crear backup antes de guardar
            if self.config_file_path.exists():
                self._create_backup("auto")
            
            # Crear directorio si no existe
            self.config_file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Guardar con formato bonito
            with open(self.config_file_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            self.current_config = config_data
            self.unsaved_changes = False
            self.last_save_time = time.time()
            
            self._emit_log(f"üíæ Configuraci√≥n guardada en: {self.config_file_path}")
            self.config_saved.emit(str(self.config_file_path))
            
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error guardando configuraci√≥n: {e}")
            self.config_error.emit(str(e))
            return False
    
    def mark_unsaved_changes(self):
        """Marca que hay cambios sin guardar"""
        self.unsaved_changes = True
    
    def has_unsaved_changes(self) -> bool:
        """Verifica si hay cambios sin guardar"""
        return self.unsaved_changes
    
    # === GESTI√ìN DE C√ÅMARAS ===
    
    def add_camera(self, camera_config: Dict[str, Any]) -> bool:
        """Agrega una nueva c√°mara a la configuraci√≥n"""
        try:
            if "camaras" not in self.current_config:
                self.current_config["camaras"] = []
            
            # Verificar que no exista una c√°mara con la misma IP
            ip = camera_config.get("ip")
            if ip and any(cam.get("ip") == ip for cam in self.current_config["camaras"]):
                self._emit_log(f"‚ö†Ô∏è Ya existe una c√°mara con IP: {ip}")
                return False
            
            # Agregar timestamp
            camera_config["added"] = datetime.now().isoformat()
            
            self.current_config["camaras"].append(camera_config)
            self.mark_unsaved_changes()
            
            self._emit_log(f"üì∑ C√°mara agregada: {ip} ({camera_config.get('tipo', 'unknown')})")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error agregando c√°mara: {e}")
            return False
    
    def remove_camera(self, camera_ip: str) -> bool:
        """Remueve una c√°mara de la configuraci√≥n"""
        try:
            if "camaras" not in self.current_config:
                return False
            
            initial_count = len(self.current_config["camaras"])
            self.current_config["camaras"] = [
                cam for cam in self.current_config["camaras"] 
                if cam.get("ip") != camera_ip
            ]
            
            removed = len(self.current_config["camaras"]) < initial_count
            if removed:
                self.mark_unsaved_changes()
                self._emit_log(f"üóëÔ∏è C√°mara removida: {camera_ip}")
            
            return removed
            
        except Exception as e:
            self._emit_log(f"‚ùå Error removiendo c√°mara: {e}")
            return False
    
    def update_camera(self, camera_ip: str, updates: Dict[str, Any]) -> bool:
        """Actualiza configuraci√≥n de una c√°mara"""
        try:
            if "camaras" not in self.current_config:
                return False
            
            for camera in self.current_config["camaras"]:
                if camera.get("ip") == camera_ip:
                    camera.update(updates)
                    camera["last_modified"] = datetime.now().isoformat()
                    self.mark_unsaved_changes()
                    
                    self._emit_log(f"üìù C√°mara actualizada: {camera_ip}")
                    return True
            
            return False
            
        except Exception as e:
            self._emit_log(f"‚ùå Error actualizando c√°mara: {e}")
            return False
    
    def get_cameras(self, camera_type: Optional[str] = None) -> List[Dict[str, Any]]:
        """Obtiene lista de c√°maras, opcionalmente filtrada por tipo"""
        cameras = self.current_config.get("camaras", [])
        
        if camera_type:
            cameras = [cam for cam in cameras if cam.get("tipo") == camera_type]
        
        return cameras
    
    def get_camera(self, camera_ip: str) -> Optional[Dict[str, Any]]:
        """Obtiene configuraci√≥n de una c√°mara espec√≠fica"""
        for camera in self.current_config.get("camaras", []):
            if camera.get("ip") == camera_ip:
                return camera
        return None
    
    # === GESTI√ìN DE GRILLA ===
    
    def save_grid_state(self, cell_manager) -> bool:
        """Guarda el estado completo de la grilla"""
        try:
            grid_state = cell_manager.to_dict()
            self.current_config["grid_settings"] = grid_state
            self.mark_unsaved_changes()
            
            stats = cell_manager.get_statistics()
            self._emit_log(f"üìê Estado de grilla guardado: {stats['total_cells']} celdas")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error guardando estado de grilla: {e}")
            return False
    
    def load_grid_state(self, cell_manager) -> bool:
        """Carga el estado de la grilla"""
        try:
            grid_settings = self.current_config.get("grid_settings", {})
            if not grid_settings:
                return False
            
            cell_manager.from_dict(grid_settings)
            self._emit_log(f"üìê Estado de grilla cargado")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error cargando estado de grilla: {e}")
            return False
    
    # === GESTI√ìN DE CONFIGURACIONES ESPEC√çFICAS ===
    
    def get_ptz_settings(self) -> Dict[str, Any]:
        """Obtiene configuraci√≥n PTZ"""
        return self.current_config.get("ptz_settings", self.default_config["ptz_settings"])
    
    def update_ptz_settings(self, updates: Dict[str, Any]) -> bool:
        """Actualiza configuraci√≥n PTZ"""
        try:
            if "ptz_settings" not in self.current_config:
                self.current_config["ptz_settings"] = {}
            
            self.current_config["ptz_settings"].update(updates)
            self.mark_unsaved_changes()
            
            self._emit_log("üéØ Configuraci√≥n PTZ actualizada")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error actualizando configuraci√≥n PTZ: {e}")
            return False
    
    def get_detection_settings(self) -> Dict[str, Any]:
        """Obtiene configuraci√≥n de detecci√≥n"""
        return self.current_config.get("detection_settings", self.default_config["detection_settings"])
    
    def update_detection_settings(self, updates: Dict[str, Any]) -> bool:
        """Actualiza configuraci√≥n de detecci√≥n"""
        try:
            if "detection_settings" not in self.current_config:
                self.current_config["detection_settings"] = {}
            
            self.current_config["detection_settings"].update(updates)
            self.mark_unsaved_changes()
            
            self._emit_log("üîç Configuraci√≥n de detecci√≥n actualizada")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error actualizando configuraci√≥n de detecci√≥n: {e}")
            return False
    
    def get_visual_settings(self) -> Dict[str, Any]:
        """Obtiene configuraci√≥n visual"""
        return self.current_config.get("visual_settings", self.default_config["visual_settings"])
    
    def update_visual_settings(self, updates: Dict[str, Any]) -> bool:
        """Actualiza configuraci√≥n visual"""
        try:
            if "visual_settings" not in self.current_config:
                self.current_config["visual_settings"] = {}
            
            self.current_config["visual_settings"].update(updates)
            self.mark_unsaved_changes()
            
            self._emit_log("üé® Configuraci√≥n visual actualizada")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error actualizando configuraci√≥n visual: {e}")
            return False
    
    # === BACKUP Y RESTAURACI√ìN ===
    
    def _create_backup(self, backup_type: str = "manual") -> Optional[Path]:
        """Crea backup de la configuraci√≥n actual"""
        try:
            if not self.config_file_path.exists():
                return None
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"config_{backup_type}_{timestamp}.json"
            backup_path = self.backup_dir / backup_filename
            
            shutil.copy2(self.config_file_path, backup_path)
            
            # Limpiar backups antiguos
            self._cleanup_old_backups()
            
            return backup_path
            
        except Exception as e:
            self._emit_log(f"‚ùå Error creando backup: {e}")
            return None
    
    def create_manual_backup(self, name: Optional[str] = None) -> Optional[Path]:
        """Crea backup manual con nombre opcional"""
        backup_type = f"manual_{name}" if name else "manual"
        backup_path = self._create_backup(backup_type)
        
        if backup_path:
            self._emit_log(f"üíæ Backup manual creado: {backup_path}")
        
        return backup_path
    
    def list_backups(self) -> List[Tuple[Path, datetime]]:
        """Lista todos los backups disponibles"""
        backups = []
        
        for backup_file in self.backup_dir.glob("config_*.json"):
            try:
                mtime = datetime.fromtimestamp(backup_file.stat().st_mtime)
                backups.append((backup_file, mtime))
            except:
                continue
        
        # Ordenar por fecha (m√°s reciente primero)
        backups.sort(key=lambda x: x[1], reverse=True)
        return backups
    
    def restore_from_backup(self, backup_path: Path) -> bool:
        """Restaura configuraci√≥n desde backup"""
        try:
            if not backup_path.exists():
                self._emit_log(f"‚ùå Backup no encontrado: {backup_path}")
                return False
            
            # Crear backup de la configuraci√≥n actual antes de restaurar
            current_backup = self._create_backup("before_restore")
            
            # Restaurar
            shutil.copy2(backup_path, self.config_file_path)
            
            # Recargar configuraci√≥n
            self.load_configuration()
            
            self._emit_log(f"üîÑ Configuraci√≥n restaurada desde: {backup_path}")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error restaurando backup: {e}")
            return False
    
    def _cleanup_old_backups(self):
        """Limpia backups antiguos manteniendo solo los m√°s recientes"""
        try:
            max_backups = self.current_config.get("system_settings", {}).get("max_backups", 10)
            backups = self.list_backups()
            
            if len(backups) > max_backups:
                for backup_path, _ in backups[max_backups:]:
                    backup_path.unlink()
                    self._emit_log(f"üóëÔ∏è Backup antiguo eliminado: {backup_path.name}")
                    
        except Exception as e:
            self._emit_log(f"‚ùå Error limpiando backups: {e}")
    
    # === EXPORTACI√ìN E IMPORTACI√ìN ===
    
    def export_configuration(self, export_path: Path, include_sensitive: bool = False) -> bool:
        """Exporta configuraci√≥n a archivo espec√≠fico"""
        try:
            export_config = self.current_config.copy()
            
            # Remover informaci√≥n sensible si se solicita
            if not include_sensitive:
                if "camaras" in export_config:
                    for camera in export_config["camaras"]:
                        if "contrasena" in camera:
                            camera["contrasena"] = "***REMOVED***"
            
            # Agregar metadata de exportaci√≥n
            export_config["export_info"] = {
                "exported_at": datetime.now().isoformat(),
                "exported_by": "PTZ Control System",
                "original_file": str(self.config_file_path),
                "includes_sensitive": include_sensitive
            }
            
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_config, f, indent=2, ensure_ascii=False)
            
            self._emit_log(f"üì§ Configuraci√≥n exportada a: {export_path}")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error exportando configuraci√≥n: {e}")
            return False
    
    def import_configuration(self, import_path: Path, merge: bool = False) -> bool:
        """Importa configuraci√≥n desde archivo"""
        try:
            if not import_path.exists():
                self._emit_log(f"‚ùå Archivo de importaci√≥n no encontrado: {import_path}")
                return False
            
            with open(import_path, 'r', encoding='utf-8') as f:
                imported_config = json.load(f)
            
            # Crear backup antes de importar
            self._create_backup("before_import")
            
            if merge:
                # Merge con configuraci√≥n actual
                self._merge_configurations(imported_config)
            else:
                # Reemplazar completamente
                self.current_config = imported_config
            
            # Validar y migrar
            self.current_config = self._validate_and_migrate_config(self.current_config)
            
            # Guardar
            self.save_configuration()
            
            self._emit_log(f"üì• Configuraci√≥n importada desde: {import_path}")
            return True
            
        except Exception as e:
            self._emit_log(f"‚ùå Error importando configuraci√≥n: {e}")
            return False
    
    def _merge_configurations(self, imported_config: Dict[str, Any]):
        """Merge configuraci√≥n importada con la actual"""
        for section, values in imported_config.items():
            if section == "camaras":
                # Merge especial para c√°maras (evitar duplicados)
                existing_ips = {cam.get("ip") for cam in self.current_config.get("camaras", [])}
                for imported_camera in values:
                    if imported_camera.get("ip") not in existing_ips:
                        self.current_config.setdefault("camaras", []).append(imported_camera)
            elif isinstance(values, dict):
                # Merge recursivo para diccionarios
                self.current_config.setdefault(section, {}).update(values)
            else:
                # Reemplazar valor directamente
                self.current_config[section] = values
    
    # === UTILIDADES ===
    
    def validate_configuration(self) -> Dict[str, List[str]]:
        """Valida la configuraci√≥n actual y retorna errores/advertencias"""
        errors = []
        warnings = []
        
        # Validar estructura b√°sica
        required_sections = ["camaras", "grid_settings", "ptz_settings"]
        for section in required_sections:
            if section not in self.current_config:
                errors.append(f"Secci√≥n faltante: {section}")
        
        # Validar c√°maras
        cameras = self.current_config.get("camaras", [])
        camera_ips = []
        
        for i, camera in enumerate(cameras):
            ip = camera.get("ip")
            if not ip:
                errors.append(f"C√°mara {i}: IP faltante")
            elif ip in camera_ips:
                errors.append(f"C√°mara {i}: IP duplicada: {ip}")
            else:
                camera_ips.append(ip)
            
            if not camera.get("usuario"):
                warnings.append(f"C√°mara {ip}: Usuario no configurado")
            
            if not camera.get("contrasena"):
                warnings.append(f"C√°mara {ip}: Contrase√±a no configurada")
        
        # Validar configuraci√≥n PTZ
        ptz_settings = self.current_config.get("ptz_settings", {})
        if ptz_settings.get("ptz_cooldown", 0) < 0.5:
            warnings.append("PTZ cooldown muy bajo (recomendado: >= 0.5s)")
        
        return {"errors": errors, "warnings": warnings}
    
    def get_configuration_summary(self) -> Dict[str, Any]:
        """Obtiene resumen de la configuraci√≥n actual"""
        cameras = self.current_config.get("camaras", [])
        grid_settings = self.current_config.get("grid_settings", {})
        
        camera_types = {}
        for camera in cameras:
            cam_type = camera.get("tipo", "unknown")
            camera_types[cam_type] = camera_types.get(cam_type, 0) + 1
        
        return {
            "version": self.current_config.get("version", "unknown"),
            "total_cameras": len(cameras),
            "camera_types": camera_types,
            "grid_size": f"{grid_settings.get('filas', 0)}x{grid_settings.get('columnas', 0)}",
            "cells_with_ptz": len(grid_settings.get("cell_ptz_map", {})),
            "cells_with_presets": len(grid_settings.get("cell_presets", {})),
            "discarded_cells": len(grid_settings.get("discarded_cells", [])),
            "last_modified": self.current_config.get("last_modified", "unknown"),
            "file_size": self.config_file_path.stat().st_size if self.config_file_path.exists() else 0
        }
    
    def cleanup(self):
        """Limpia recursos y guarda cambios pendientes"""
        if self.unsaved_changes:
            self._emit_log("üíæ Guardando cambios pendientes...")
            self.save_configuration()
        
        self._emit_log("üßπ ConfigManager limpiado")